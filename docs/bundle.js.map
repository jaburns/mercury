{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/grid.ts","webpack:///./node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/gl-matrix/esm/mat2.js","webpack:///./node_modules/gl-matrix/esm/mat2d.js","webpack:///./node_modules/gl-matrix/esm/mat3.js","webpack:///./node_modules/gl-matrix/esm/mat4.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/gl-matrix/esm/vec4.js","webpack:///./node_modules/gl-matrix/esm/quat.js","webpack:///./node_modules/gl-matrix/esm/quat2.js","webpack:///./node_modules/gl-matrix/esm/vec2.js","webpack:///./node_modules/gl-matrix/esm/index.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./src/caveGenerator/index.ts","webpack:///./src/caveGenerator/findContours.ts","webpack:///./src/utils/math.ts","webpack:///./node_modules/lodash/isObjectLike.js","webpack:///./src/webgl/shaderLoader.ts","webpack:///./src/webgl/frameBufferTexture.ts","webpack:///./src/webgl/bufferRenderer.ts","webpack:///./src/index.ts","webpack:///./src/pages/vector-caves.ts","webpack:///./src/caveGenerator/automaton.ts","webpack:///./src/utils/prng.ts","webpack:///./src/caveGenerator/smoothCurve.ts","webpack:///./src/caveGenerator/triangulate.ts","webpack:///./src/pages/page2-webgl.ts","webpack:///./src/webgl/caveRenderer.ts","webpack:///./node_modules/lodash/flatten.js","webpack:///./node_modules/lodash/_baseFlatten.js","webpack:///./node_modules/lodash/_arrayPush.js","webpack:///./node_modules/lodash/_isFlattenable.js","webpack:///./node_modules/lodash/_root.js","webpack:///./node_modules/lodash/_freeGlobal.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/lodash/isArguments.js","webpack:///./node_modules/lodash/_baseIsArguments.js","webpack:///./node_modules/lodash/_baseGetTag.js","webpack:///./node_modules/lodash/_getRawTag.js","webpack:///./node_modules/lodash/_objectToString.js","webpack:///./node_modules/lodash/isArray.js","webpack:///./src/webgl/gaussianBlur.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","WriteGrid","width","height","this","vals","Array","write","x","y","val","at","copyFrom","grid","safeOutOfBounds","oobValue","GridTool","find","test","forEach","fn","map","result","EPSILON","ARRAY_TYPE","Float32Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","mat2_scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","mat2_equals","multiplyScalar","multiplyScalarAndAdd","scale","mul","sub","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","aa","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","a4","a5","b4","b5","mat2d_rotate","mat2d_scale","translate","mat2d_fromRotation","mat2d_fromScaling","fromTranslation","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","m02","m12","m20","m21","m22","mat3_set","mat3_identity","mat3_transpose","a01","a02","a12","mat3_invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","mat3_adjoint","mat3_determinant","mat3_multiply","b00","b02","b10","b12","b20","b22","mat3_translate","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","a6","a7","a8","b6","b7","b8","mat3_mul","mat3_sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m03","m13","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_scale","mat4_rotate","axis","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a9","a14","a15","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","zero","vec3_str","vec3_exactEquals","vec3_equals","vec","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","stride","offset","count","arg","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_cross","u","A","B","C","E","F","G","H","I","J","vec4_lerp","vec4_random","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_zero","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","sqlerp","setAxes","view","quat2_create","dq","quat2_clone","quat2_fromValues","w1","fromRotationTranslationValues","quat2_fromRotationTranslation","quat2_fromTranslation","quat2_fromRotation","quat2_fromMat4","outer","quat2_copy","quat2_identity","quat2_set","getReal","getDual","setReal","setDual","quat2_getTranslation","quat2_translate","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","quat2_rotateX","quat2_rotateY","quat2_rotateZ","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","quat2_add","quat2_multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","quat2_mul","quat2_scale","quat2_dot","quat2_lerp","mt","quat2_invert","sqlen","quat2_squaredLength","quat2_conjugate","quat2_length","quat2_len","quat2_sqrLen","quat2_normalize","a_dot_b","quat2_str","quat2_exactEquals","quat2_equals","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_zero","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","__webpack_exports__","common_namespaceObject","mat2_namespaceObject","mat2d_namespaceObject","mat3_namespaceObject","mat4_namespaceObject","quat_namespaceObject","quat2_namespaceObject","vec2_namespaceObject","vec3_namespaceObject","vec4_namespaceObject","grid_1","automaton_1","findContours_1","smoothCurve_1","math_1","triangulate_1","gl_matrix_1","floodFill","replace","tile","generateCave","config","generateCaveVerbose","cave","automatonResult","runCellularAutomaton","seed","coloredGrid","bigColor","color","largestColor","largestRegion","pos","size","colorGridRegions","filledGrid","edgeMarkedGrid","markEdges","findContoursResult","findContours","edgePointDist","outerMostContourIndex","contours","area","RectTool","findBounds","sort","smoothContours","smoothCurve","curveQuality","curveBend","topLeftPtI","topLeftPt","topLeftPrevPt","bumpDownAmount","splice","vec2","triangles","triangulate","edges","details","topLeftMostVertexIndex","WalkedStatus","kind","normal","spaceInsurance","walkMap","_","Unwalked","iter","newContour","findOneContour","push","bestCandidate","prev","candidates","minVal","minI","smallestDifferenceRadians","freshStart","findFreshContour","points","lastCan","dx","dy","lastStatus","Walked","newStatus","WalkedImportant","xmax","xmin","ymax","ymin","pts","loadShader","gl","url","fetch","then","response","ok","Error","status","text","shader","body","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","vertLog","getShaderInfoLog","fragShader","FRAGMENT_SHADER","fragLog","prog","createProgram","attachShader","linkProgram","buildProgram","FrameBufferTexture","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","texture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGB","UNSIGNED_BYTE","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","release","deleteTexture","deleteFramebuffer","releaseTexture","shaderLoader_1","BufferRenderer","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","shaderPath","draw","onPreDraw","useProgram","activeTexture","TEXTURE0","loc_tex","getUniformLocation","uniform1i","posLoc","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLES","deleteProgram","deleteBuffer","vector_caves_1","page2_webgl_1","postInitters","vector-caves","initPost","page2-webgl","window","caveGenerator_1","randomColorHex","randPair","ret","toString","colors","events","listener","ctx","document","getElementById","getContext","seedSlider","insuranceSlider","curvinessSlider","qualitySlider","ctx2","ctx3","ctx4","ctx5","ctx6","ctx7","ctx9","update","parseInt","parseFloat","_a","fillStyle","fillRect","degs","hx","hy","gridColorForNormal","curveSpaceToCanvasSpace","pt","strokeStyle","beginPath","first","moveTo","i_1","next","lineTo","closePath","stroke","i_2","ts","fill","e","prng_1","getNeighborhood","nx","ny","population","birth","survival","iterations","buffer","rand","nextRandom01","neighbors","M","prevRandom01","input","resolution","curviness","curr","lenA","lenB","midA","midB","midDiff","diffA","diffB","controlA","controlB","inc","newVal","indices","V","nv","snip","inside_triangle","P","apx","apy","bpx","bpy","cpx","cpy","caveRenderer_1","frameBufferTexture_1","bufferRenderer_1","gaussianBlur_1","buildSurfaceInfoBuffers","Promise","all","CaveRenderer","GaussianBlur","caveRenderer","normalsBlit","gaussBlur0","gaussBlur1","frameBufferTex","viewport","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","run","resultTexture","uniform2f","canvas","depth","drawInfoBufferDemo","copyBlit","infoBuffers","drawBasicCaveDemo","startTime","Date","now","render","drawNice","requestAnimationFrame","drawDetailedCaveDemo","flatten","getFlatVerts","from","getFlatIndices","baseCount","tris","index","concat","indexBufferData","indexBufferLen","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","UNSIGNED_SHORT","ta","mvp","mat4","uniformMatrix4fv","uniform1f","TEXTURE1","baseFlatten","array","arrayPush","isFlattenable","predicate","isStrict","values","isArguments","isArray","spreadableSymbol","isConcatSpreadable","undefined","freeGlobal","freeSelf","self","root","Function","global","g","baseIsArguments","isObjectLike","objectProto","propertyIsEnumerable","arguments","baseGetTag","argsTag","getRawTag","objectToString","nullTag","undefinedTag","symToStringTag","nativeObjectToString","isOwn","tag","unmasked","bufferRenderer","frameTex0","frameTex1","_this"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","export interface Grid<T> {\r\n    readonly width: number;\r\n    readonly height: number;\r\n    at(x: number, y: number): T;\r\n}\r\n\r\nexport type GridCallback<T> = (x: number, y: number, val: T) => void;\r\nexport type GridMapper<T,U> = (x: number, y: number, val: T) => U;\r\n\r\nexport class WriteGrid<T> implements Grid<T> {\r\n    public readonly width: number;\r\n    public readonly height: number;\r\n\r\n    private vals: T[];\r\n\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.vals = new Array(width * height);\r\n    }\r\n\r\n    write(x: number, y: number, val: T): void {\r\n        this.vals[x + y*this.width] = val;\r\n    }\r\n\r\n    at(x: number, y: number): T {\r\n        return this.vals[x + y*this.width];\r\n    }\r\n\r\n    copyFrom(grid: Grid<T>): void {\r\n        for (let x = 0; x < this.width && x < grid.width; ++x) {\r\n            for (let y = 0; y < this.height && y < grid.height; ++y) {\r\n                this.write(x, y, grid.at(x, y));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const safeOutOfBounds = <T>(grid: Grid<T>, oobValue: T): Grid<T> => ({\r\n    width: grid.width,\r\n    height: grid.height,\r\n    at: (x, y) => x < 0 || y < 0 || x >= grid.width || y >= grid.width ? oobValue : grid.at(x, y)\r\n});\r\n\r\nexport const GridTool = {\r\n    find: <T>(grid: Grid<T>, test: GridMapper<T, boolean>): { x: number, y: number } | null => {\r\n        for (let x = 0; x < grid.width; ++x) {\r\n            for (let y = 0; y < grid.height; ++y) {\r\n                if (test(x, y, grid.at(x, y))) {\r\n                    return { x, y };\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n    forEach: <T>(grid: Grid<T>, fn: GridCallback<T>): void => {\r\n        for (let x = 0; x < grid.width; ++x) {\r\n            for (let y = 0; y < grid.height; ++y) {\r\n                fn(x, y, grid.at(x, y));\r\n            }\r\n        }\r\n    },\r\n\r\n    map: <T, U>(grid: Grid<T>, fn: GridMapper<T, U>): WriteGrid<U> => {\r\n        const result = new WriteGrid<U>(grid.width, grid.height);\r\n\r\n        for (let x = 0; x < grid.width; ++x) {\r\n            for (let y = 0; y < grid.height; ++y) {\r\n                result.write(x, y, fn(x, y, grid.at(x, y)));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n};","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","import { Grid, WriteGrid, GridTool, safeOutOfBounds } from 'utils/grid';\r\nimport { runCellularAutomaton } from './automaton';\r\nimport { markEdges, findContours, EdgeMarkedMapTile, FindContoursResult } from './findContours';\r\nimport { smoothCurve } from './smoothCurve';\r\nimport { findBounds, RectTool } from 'utils/math';\r\nimport { triangulate } from './triangulate';\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport interface CaveGeneratorConfig {\r\n    seed: number,\r\n    edgePointDist: 0 | 1 | 2,\r\n    curveQuality: number,\r\n    curveBend: number,\r\n}\r\n\r\nexport interface Cave {\r\n    edges: vec2[][],\r\n    triangles: number[][],\r\n}\r\n\r\nexport interface CaveBuildDetails {\r\n    automatonResult: Grid<boolean>;\r\n    coloredGrid: Grid<number>;\r\n    filledGrid: Grid<boolean>;\r\n    edgeMarkedGrid: Grid<EdgeMarkedMapTile>;\r\n    findContoursResult: FindContoursResult;\r\n    outerMostContourIndex: number;\r\n    topLeftMostVertexIndex: number;\r\n}\r\n\r\nconst floodFill = (grid: WriteGrid<number>, x: number, y: number, replace: number, value: number, count: number): number => {\r\n    if (x < 0 || y < 0) return count;\r\n    if (x >= grid.width || y >= grid.height) return count;\r\n\r\n    const tile = grid.at(x, y);\r\n\r\n    if (tile === value) return count;\r\n    if (tile !== replace) return count;\r\n\r\n    grid.write(x, y, value);\r\n    count++;\r\n\r\n    count = floodFill(grid, x - 1, y, replace, value, count);\r\n    count = floodFill(grid, x + 1, y, replace, value, count);\r\n    count = floodFill(grid, x, y - 1, replace, value, count);\r\n    count = floodFill(grid, x, y + 1, replace, value, count);\r\n    return count;\r\n};\r\n\r\nconst colorGridRegions = (grid: WriteGrid<number>): number => {\r\n    let color = 1;\r\n    let largestColor = -1;\r\n    let largestRegion = 0;\r\n\r\n    while (true) {\r\n        const pos = GridTool.find(grid, (x, y, val) => val === 0);\r\n        if (pos === null) return largestColor;\r\n\r\n        const size = floodFill(grid, pos.x, pos.y, 0, color, 0);\r\n\r\n        if (size > largestRegion) {\r\n            largestRegion = size;\r\n            largestColor = color;\r\n        }\r\n\r\n        color++;\r\n    }\r\n};\r\n\r\nconst fixSingleTileBridges = (grid: WriteGrid<boolean>): void => {\r\n    GridTool.forEach(safeOutOfBounds(grid, true), (x, y, val) => {\r\n        if (!val) return;\r\n\r\n        if (val && !grid.at(x - 1, y) && !grid.at(x + 1, y)) {\r\n            grid.write(x + 1, y, true);\r\n        }\r\n\r\n        if (val && !grid.at(x, y - 1) && !grid.at(x, y + 1)) {\r\n            grid.write(x, y + 1, true);\r\n        }\r\n    });\r\n};\r\n\r\nexport const generateCave = (config: CaveGeneratorConfig): Cave => \r\n    generateCaveVerbose(config).cave;\r\n\r\nexport const generateCaveVerbose = (config: CaveGeneratorConfig): { cave: Cave, details: CaveBuildDetails } => {\r\n    const automatonResult = runCellularAutomaton(75, 75, config.seed, 0.48, 5, 4, 40);\r\n\r\n    const coloredGrid = GridTool.map(automatonResult, (x, y, val) => val ? -1 : 0);\r\n    const bigColor = colorGridRegions(coloredGrid);\r\n\r\n    const filledGrid = GridTool.map(coloredGrid, (x, y, val) => val !== bigColor);\r\n    fixSingleTileBridges(filledGrid);\r\n\r\n    const edgeMarkedGrid = markEdges(filledGrid);\r\n\r\n    const findContoursResult = findContours(edgeMarkedGrid, config.edgePointDist);\r\n\r\n    const outerMostContourIndex = findContoursResult.contours\r\n        .map((c, i) => ({ i, area: RectTool.area(findBounds(c)) }))\r\n        .sort((a, b) => b.area - a.area)\r\n        [0].i;\r\n\r\n    const smoothContours = findContoursResult.contours.map(x => smoothCurve(x, config.curveQuality, config.curveBend));\r\n\r\n    const BOUNDS = 1.0;\r\n\r\n    const mostTopLeft = (pts: vec2[]): number =>\r\n        pts.map((p, i) => ({ i, len: (p[0]+BOUNDS)*(p[0]+BOUNDS) + (p[1]+BOUNDS)*(p[1]+BOUNDS) }))\r\n            .sort((a, b) => a.len - b.len)\r\n            [0].i;\r\n\r\n    const topLeftPtI = mostTopLeft(smoothContours[outerMostContourIndex]);\r\n    const topLeftPt = smoothContours[outerMostContourIndex][topLeftPtI];\r\n    const topLeftPrevPt = smoothContours[outerMostContourIndex][topLeftPtI === 0 ? smoothContours[outerMostContourIndex].length - 1 : topLeftPtI - 1];\r\n\r\n    const bumpDownAmount = Math.abs(topLeftPt[1] - topLeftPrevPt[1]);\r\n\r\n    smoothContours[outerMostContourIndex].splice(topLeftPtI, 0,\r\n        vec2.fromValues( -BOUNDS,  -BOUNDS+bumpDownAmount),\r\n        vec2.fromValues( -BOUNDS,   BOUNDS),\r\n        vec2.fromValues(  BOUNDS,   BOUNDS),\r\n        vec2.fromValues(  BOUNDS,  -BOUNDS),\r\n        vec2.fromValues( -BOUNDS,  -BOUNDS),\r\n        vec2.fromValues( \r\n            (topLeftPt[0] + topLeftPrevPt[0]) / 2, \r\n            (topLeftPt[1] + topLeftPrevPt[1]) / 2\r\n        )\r\n    );\r\n\r\n    const triangles = smoothContours.map(triangulate);\r\n\r\n    smoothContours[outerMostContourIndex][topLeftPtI][1] -= bumpDownAmount;\r\n    smoothContours[outerMostContourIndex][topLeftPtI+5][0] = topLeftPrevPt[0];\r\n    smoothContours[outerMostContourIndex][topLeftPtI+5][1] = topLeftPrevPt[1];\r\n\r\n    return {\r\n        cave: {\r\n            edges: smoothContours,\r\n            triangles\r\n        },\r\n        details: {\r\n            automatonResult,\r\n            coloredGrid,\r\n            filledGrid,\r\n            edgeMarkedGrid,\r\n            findContoursResult,\r\n            outerMostContourIndex,\r\n            topLeftMostVertexIndex: topLeftPtI\r\n        }\r\n    };\r\n};\r\n","import { Grid, WriteGrid, GridTool, safeOutOfBounds } from 'utils/grid';\r\nimport { smallestDifferenceRadians } from 'utils/math';\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport interface EdgeMarkedMapTile {\r\n    kind: 'air' | 'dirt' | 'edge',\r\n    normal: number,\r\n}\r\n\r\nexport const markEdges = (grid: Grid<boolean>): WriteGrid<EdgeMarkedMapTile> => {\r\n    const result = GridTool.map(grid, (x, y, val): EdgeMarkedMapTile => \r\n        ({ kind: val ? 'dirt' : 'air', normal: 0 }));\r\n\r\n    for (let x = 0; x < grid.width; x++) {\r\n        for (let y = 0; y < grid.height; y++) {\r\n            if (!grid.at(x, y)) continue;\r\n\r\n            const l = x > 0               && !grid.at(x-1, y);\r\n            const r = x < grid.width - 2  && !grid.at(x+1, y);\r\n            const u = y > 0               && !grid.at(x, y-1);\r\n            const d = y < grid.height - 2 && !grid.at(x, y+1);\r\n\r\n            if (!l && !r && !u && !d) continue;\r\n\r\n            const normal = r && d ? 45 :\r\n                d && l ?  135 :\r\n                l && u ? -135 :\r\n                u && r ?  -45 :\r\n                r ? 0 :\r\n                d ? 90 :\r\n                l ? 180 :\r\n                -90;\r\n\r\n            result.write(x, y, { kind: 'edge', normal });\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport enum WalkedStatus {\r\n    Unwalked,\r\n    Walked,\r\n    WalkedImportant,\r\n}\r\n\r\ninterface WalkCandidate {\r\n    dx: number,\r\n    dy: number,\r\n    normal: number,\r\n}\r\n\r\ninterface GridPoint {\r\n    x: number,\r\n    y: number,\r\n}\r\n\r\nexport interface FindContoursResult {\r\n    contours: vec2[][],\r\n    walkMap: WriteGrid<WalkedStatus>,\r\n}\r\n\r\nexport const findContours = (grid: Grid<EdgeMarkedMapTile>, spaceInsurance: 0 | 1 | 2): FindContoursResult => {\r\n    const MAX_ITER = 100;\r\n    const walkMap = GridTool.map(new WriteGrid<WalkedStatus>(grid.width, grid.height), _ => WalkedStatus.Unwalked);\r\n    const contours: vec2[][] = [];\r\n\r\n    let iter = 0;\r\n    let newContour: vec2[] | null = null;\r\n\r\n    do {\r\n        newContour = findOneContour(walkMap, grid, spaceInsurance);\r\n        if (newContour !== null && newContour.length > 2) {\r\n            contours.push(newContour);\r\n        }\r\n    } while (newContour != null && iter++ < MAX_ITER);\r\n\r\n    return { contours, walkMap };\r\n}\r\n\r\nconst findFreshContour = (walkMap: Grid<WalkedStatus>, grid: Grid<EdgeMarkedMapTile>): GridPoint | null => {\r\n    for (let x = 0; x < grid.width; x++) {\r\n        for (let y = 0; y < grid.height; y++) {\r\n            if (grid.at(x, y).kind === 'edge' && walkMap.at(x, y) === WalkedStatus.Unwalked) {\r\n                return { x, y };\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst bestCandidate = (prev: WalkCandidate, candidates: WalkCandidate[]): WalkCandidate => {\r\n    let minVal = 100;\r\n    let minI = 0;\r\n\r\n    for (let i = 0; i < candidates.length; ++i) {\r\n        const c = candidates[i];\r\n        const d = Math.abs(smallestDifferenceRadians(\r\n            c.normal * Math.PI / 180,\r\n            prev.normal * Math.PI / 180\r\n        ));\r\n\r\n        if (d < minVal) {\r\n            minVal = d;\r\n            minI = i;\r\n        }\r\n    }\r\n\r\n    return candidates[minI];\r\n};\r\n\r\nconst findOneContour = (walkMap: WriteGrid<WalkedStatus>, grid: Grid<EdgeMarkedMapTile>, spaceInsurance: 0 | 1 | 2): vec2[] | null => {\r\n    const MAX_ITER = 5000;\r\n\r\n    const freshStart = findFreshContour(walkMap, grid);\r\n    if (freshStart === null) {\r\n        return null;\r\n    }\r\n\r\n    grid = safeOutOfBounds(grid, {kind: 'dirt', normal: 0} as EdgeMarkedMapTile);\r\n\r\n    const points: vec2[] = [];\r\n    let x = freshStart.x;\r\n    let y = freshStart.y;\r\n\r\n    let iter = 0;\r\n    let lastCan: WalkCandidate = { dx: 0, dy: 0, normal: 0 };\r\n    let lastStatus = WalkedStatus.Walked;\r\n    let candidates: WalkCandidate[] = [];\r\n\r\n    do {\r\n        candidates = [];\r\n\r\n        for (let dx = -1; dx <= 1; dx++) {\r\n            for (let dy = -1; dy <= 1; dy++) {\r\n                if (dx === 0 && dy === 0) continue;\r\n                if (grid.at(x+dx, y+dy).kind === 'edge'\r\n                && walkMap.at(x+dx, y+dy) === WalkedStatus.Unwalked) {\r\n                    candidates.push({dx, dy, normal: grid.at(x+dx, y+dy).normal});\r\n                }\r\n            }\r\n        }\r\n\r\n        if (candidates.length > 0) {\r\n            const c = bestCandidate(lastCan, candidates);\r\n            x += c.dx;\r\n            y += c.dy;\r\n\r\n            let newStatus = WalkedStatus.Walked;\r\n            if (c.normal !== lastCan.normal) {\r\n                let important;\r\n                if (spaceInsurance === 0) {\r\n                    important = true;\r\n                } else if (spaceInsurance === 1) {\r\n                    important = c.dx != 0 && c.dy != 0 || lastStatus != WalkedStatus.WalkedImportant;\r\n                } else {\r\n                    important = lastStatus != WalkedStatus.WalkedImportant;\r\n                }\r\n\r\n                if (important) {\r\n                    newStatus = WalkedStatus.WalkedImportant;\r\n                }\r\n            }\r\n\r\n            if (newStatus === WalkedStatus.WalkedImportant) {\r\n                points.push(vec2.fromValues(\r\n                    2*(x + 0.5)/grid.width - 1,\r\n                    2*(y + 0.5)/grid.height - 1,\r\n                ));\r\n            }\r\n\r\n            walkMap.write(x, y, newStatus);\r\n            lastStatus = newStatus;\r\n            lastCan = c;\r\n        }\r\n    }\r\n    while (candidates.length > 0 && iter++ < MAX_ITER);\r\n\r\n    return points;\r\n};","import { vec2 } from \"gl-matrix\";\r\n\r\nexport interface Rect {\r\n    xmin: number,\r\n    ymin: number,\r\n    xmax: number,\r\n    ymax: number,\r\n}\r\n\r\nexport const RectTool = {\r\n    area: (r: Rect): number =>\r\n        (r.xmax - r.xmin) * (r.ymax - r.ymin),\r\n};\r\n\r\nexport const smallestDifferenceRadians = (a: number, b: number): number => {\r\n    a %= 2 * Math.PI;\r\n    b %= 2 * Math.PI;\r\n\r\n    if (Math.abs(a - b) > Math.PI) {\r\n        if (a > 0) a -= 2 * Math.PI;\r\n        else a += 2 * Math.PI;\r\n    }\r\n\r\n    return a - b;\r\n};\r\n\r\nexport const findBounds = (pts: vec2[]): Rect => {\r\n    const result: Rect = { xmin: Infinity, ymin: Infinity, xmax: -Infinity, ymax: -Infinity };\r\n\r\n    pts.forEach(p => {\r\n        if (p[0] < result.xmin) result.xmin = p[0];\r\n        if (p[1] < result.ymin) result.ymin = p[1];\r\n        if (p[0] > result.xmax) result.xmax = p[0];\r\n        if (p[1] > result.ymax) result.ymax = p[1];\r\n    });\r\n\r\n    return result;\r\n};","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","const buildProgram = (gl: WebGLRenderingContext, body: string): WebGLProgram | string => {\r\n    const vertShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;\r\n    gl.shaderSource(vertShader, '#define VERTEX\\n' + body + '\\n');\r\n    gl.compileShader(vertShader);\r\n\r\n    const vertLog = gl.getShaderInfoLog(vertShader);\r\n    if (vertLog === null || vertLog.length > 0) {\r\n        return vertLog as string;\r\n    }\r\n\r\n    const fragShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;\r\n    gl.shaderSource(fragShader, '#define FRAGMENT\\n' + body + '\\n');\r\n    gl.compileShader(fragShader);\r\n\r\n    const fragLog = gl.getShaderInfoLog(fragShader);\r\n    if (fragLog === null || fragLog.length > 0) {\r\n        return fragLog as string;\r\n    }\r\n\r\n    const prog = gl.createProgram() as WebGLProgram;\r\n    gl.attachShader(prog, vertShader);\r\n    gl.attachShader(prog, fragShader);\r\n    gl.linkProgram(prog);\r\n\r\n    // TODO delete individual shaders before returning compiled program\r\n\r\n    return prog;\r\n};\r\n\r\nexport const loadShader = (gl: WebGLRenderingContext, url: string): Promise<WebGLProgram | string> =>\r\n    fetch(url)\r\n        .then(response => {\r\n            if (!response.ok) throw new Error(\"HTTP error, status = \" + response.status);\r\n            return response.text();\r\n        })\r\n        .then(shader => buildProgram(gl, shader));","export class FrameBufferTexture {\r\n    readonly framebuffer: WebGLFramebuffer;\r\n    readonly texture: WebGLTexture;\r\n\r\n    private readonly gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext, width: number, height: number) {\r\n        this.gl = gl;\r\n\r\n        this.framebuffer = gl.createFramebuffer() as WebGLFramebuffer;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n        \r\n        this.texture = gl.createTexture() as WebGLTexture;\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, width, height, 0, gl.RGB, gl.UNSIGNED_BYTE, null);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR); \r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        \r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0); \r\n    }\r\n\r\n    release() {\r\n        const gl = this.gl;\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n        gl.deleteTexture(this.texture);\r\n        gl.deleteFramebuffer(this.framebuffer);\r\n    }\r\n\r\n    releaseTexture(): WebGLTexture {\r\n        const gl = this.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(this.framebuffer);\r\n\r\n        return this.texture;\r\n    }\r\n}\r\n","import { loadShader } from \"./shaderLoader\";\r\n\r\nexport class BufferRenderer {\r\n    private readonly gl: WebGLRenderingContext;\r\n    private readonly vertexBuffer: WebGLBuffer;\r\n    private readonly shader: WebGLProgram;\r\n\r\n    static create(gl: WebGLRenderingContext, shaderPath: string, ): Promise<BufferRenderer> {\r\n        return loadShader(gl, shaderPath)\r\n            .then(shader => new BufferRenderer(gl, shader));\r\n    }\r\n\r\n    private constructor(gl: WebGLRenderingContext, shader: WebGLProgram) {\r\n        this.gl = gl;\r\n        this.shader = shader;\r\n\r\n        this.vertexBuffer = gl.createBuffer() as WebGLBuffer;\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ -1,1,-1,-1,1,-1,1,-1,1,1,-1,1 ]), gl.STATIC_DRAW);\r\n    }\r\n\r\n    draw(texture: WebGLTexture, onPreDraw?: (gl: WebGLRenderingContext, shader: WebGLProgram) => void) {\r\n        const gl = this.gl;\r\n\r\n        gl.useProgram(this.shader);\r\n\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        const loc_tex = gl.getUniformLocation(this.shader, \"u_tex\");\r\n        gl.uniform1i(loc_tex, 0);\r\n\r\n        if (onPreDraw) onPreDraw(gl, this.shader);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n\r\n        const posLoc = gl.getAttribLocation(this.shader, \"i_position\");\r\n        gl.enableVertexAttribArray(posLoc);\r\n        gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    }\r\n\r\n    release() {\r\n        const gl = this.gl;\r\n\r\n        gl.useProgram(null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        gl.deleteProgram(this.shader);\r\n        gl.deleteBuffer(this.vertexBuffer);\r\n    }\r\n}","import { initPost as initPost_vectorCaves } from 'pages/vector-caves';\r\nimport { initPost as initPost_webgl } from 'pages/page2-webgl';\r\n\r\nconst postInitters: {[key: string]: () => void} = {\r\n    'vector-caves': initPost_vectorCaves,\r\n    'page2-webgl': initPost_webgl\r\n};\r\n\r\n(window as any).initPost = (name: string): void =>\r\n    postInitters[name]();","import { generateCaveVerbose, CaveGeneratorConfig } from 'caveGenerator';\r\nimport { GridTool } from 'utils/grid';\r\nimport { WalkedStatus } from 'caveGenerator/findContours';\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nconst randomColorHex = (): string => {\r\n    const randPair = (): string => {\r\n        let ret = Math.floor(Math.random() * 256).toString(16);\r\n        if (ret.length < 2) ret = '0'+ret;\r\n        return ret;\r\n    };\r\n\r\n    return '#' + randPair() + randPair() + randPair();\r\n};\r\n\r\nconst colors = [0,0,0,0,0,0,0,0,0,0].map(_ => randomColorHex());\r\n\r\nconst gridColorForNumber = (n: number): string => {\r\n    if (n < 0) return '#000';\r\n    return colors[n % colors.length];\r\n};\r\n\r\nconst gridColorForNormal = (degs: number): string => {\r\n    const x = Math.cos(degs * Math.PI / 180);\r\n    const y = Math.sin(degs * Math.PI / 180);\r\n\r\n    const hx = Math.round(15 * (0.5*x + 0.5));\r\n    const hy = Math.round(15 * (0.5*y + 0.5));\r\n\r\n    const result = '#' + hx.toString(16) + hy.toString(16) + 'f';\r\n\r\n    return result;\r\n};\r\n\r\nconst multibind = (objs: any[], events: string[], listener: Function): void => {\r\n    objs.forEach(o => {\r\n        events.forEach(e => {\r\n            o[e] = listener;\r\n        });\r\n    });\r\n};\r\n\r\nexport const initPost = () :void => {\r\n    const firstCanvas = document.getElementById('first-canvas') as HTMLCanvasElement;\r\n    const ctx = firstCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const seedSlider = document.getElementById('seed-slider') as HTMLInputElement;\r\n    const insuranceSlider = document.getElementById('insurance-slider') as HTMLInputElement;\r\n    const curvinessSlider = document.getElementById('curviness-slider') as HTMLInputElement;\r\n    const qualitySlider = document.getElementById('quality-slider') as HTMLInputElement;\r\n\r\n    const secondCanvas = document.getElementById('second-canvas') as HTMLCanvasElement;\r\n    const ctx2 = secondCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const thirdCanvas = document.getElementById('third-canvas') as HTMLCanvasElement;\r\n    const ctx3 = thirdCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const fourthCanvas = document.getElementById('fourth-canvas') as HTMLCanvasElement;\r\n    const ctx4 = fourthCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const fifthCanvas = document.getElementById('fifth-canvas') as HTMLCanvasElement;\r\n    const ctx5 = fifthCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const sixthCanvas = document.getElementById('sixth-canvas') as HTMLCanvasElement;\r\n    const ctx6 = sixthCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const seventhCanvas = document.getElementById('seventh-canvas') as HTMLCanvasElement;\r\n    const ctx7 = seventhCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const ninthCanvas = document.getElementById('ninth-canvas') as HTMLCanvasElement;\r\n    const ctx9 = ninthCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const update = () :void => {\r\n        const config: CaveGeneratorConfig = {\r\n            seed: parseInt(seedSlider.value),\r\n            edgePointDist: parseInt(insuranceSlider.value) as any,\r\n            curveBend: 2 * parseFloat(curvinessSlider.value) / 100,\r\n            curveQuality: parseFloat(qualitySlider.value), \r\n        };\r\n\r\n        const { cave, details } = generateCaveVerbose(config);\r\n\r\n        GridTool.forEach(details.automatonResult, (x, y, val) => {\r\n            ctx.fillStyle = val ? '#000' : '#FFF';\r\n            ctx.fillRect(4*x, 4*y, 4, 4);\r\n        });\r\n\r\n        GridTool.forEach(details.coloredGrid, (x, y, val) => {\r\n            ctx2.fillStyle = gridColorForNumber(val);\r\n            ctx2.fillRect(4*x, 4*y, 4, 4);\r\n        });\r\n\r\n        GridTool.forEach(details.filledGrid, (x, y, val) => {\r\n            ctx3.fillStyle = val ? '#000' : '#FFF';\r\n            ctx3.fillRect(4*x, 4*y, 4, 4);\r\n        });\r\n\r\n        GridTool.forEach(details.edgeMarkedGrid, (x, y, val) => {\r\n            ctx4.fillStyle = val.kind === 'edge' ? gridColorForNormal(val.normal) : val.kind === 'air' ? '#655' : '#77f';\r\n            ctx4.fillRect(4*x, 4*y, 4, 4);\r\n        });\r\n\r\n        const contours = details.findContoursResult;\r\n\r\n        GridTool.forEach(contours.walkMap, (x, y, val) => {\r\n            ctx5.fillStyle = val === WalkedStatus.WalkedImportant ? '#fff' : val === WalkedStatus.Walked ? '#333' : '#000';\r\n            ctx5.fillRect(4*x, 4*y, 4, 4);\r\n\r\n            ctx6.fillStyle = val === WalkedStatus.WalkedImportant ? '#333' : '#000';\r\n            ctx6.fillRect(9*x, 9*y, 9, 9);\r\n        });\r\n\r\n        const BIG_CANVAS_SIZE = 675;\r\n\r\n        const curveSpaceToCanvasSpace = (pt: vec2): vec2 => vec2.fromValues(\r\n            (BIG_CANVAS_SIZE / 2) * (1 + pt[0]),\r\n            (BIG_CANVAS_SIZE / 2) * (1 + pt[1])\r\n        );\r\n\r\n        // =--------------------------------------------\r\n\r\n        contours.contours.forEach((c, i) => {\r\n            ctx6.strokeStyle = i === details.outerMostContourIndex ? '#f00' : '#933';\r\n\r\n            ctx6.beginPath();\r\n            const first = curveSpaceToCanvasSpace(c[0]);\r\n            ctx6.moveTo(first[0], first[1]);\r\n\r\n            for (let i = 1; i < c.length; ++i) {\r\n                const next = curveSpaceToCanvasSpace(c[i]);\r\n                ctx6.lineTo(next[0], next[1]);\r\n            }\r\n\r\n            ctx6.closePath();\r\n            ctx6.stroke();\r\n        });\r\n\r\n        // =--------------------------------------------\r\n\r\n        ctx7.strokeStyle = '#0f0';\r\n        ctx7.fillStyle = '#000';\r\n        ctx7.fillRect(0, 0, BIG_CANVAS_SIZE, BIG_CANVAS_SIZE);\r\n\r\n        cave.edges.forEach((c, i) => {\r\n            ctx7.strokeStyle = i === details.outerMostContourIndex ? '#0f0' : '#393';\r\n\r\n            ctx7.beginPath();\r\n            const first = curveSpaceToCanvasSpace(c[0]);\r\n            ctx7.moveTo(first[0], first[1]);\r\n\r\n            for (let i = 1; i < c.length; ++i) {\r\n                const next = curveSpaceToCanvasSpace(c[i]);\r\n                ctx7.lineTo(next[0], next[1]);\r\n            }\r\n\r\n            ctx7.closePath();\r\n            ctx7.stroke();\r\n        });\r\n\r\n        // =--------------------------------------------\r\n\r\n        ctx9.fillStyle = '#000';\r\n        ctx9.fillRect(0, 0, BIG_CANVAS_SIZE, BIG_CANVAS_SIZE);\r\n\r\n        cave.triangles.forEach((ts,j) => {\r\n            for (let i = 0; i < ts.length - 2; i += 3) {\r\n                ctx9.fillStyle = randomColorHex();\r\n                ctx9.beginPath();\r\n\r\n                const first = curveSpaceToCanvasSpace(cave.edges[j][ts[i]]);\r\n                ctx9.moveTo(first[0], first[1]);\r\n\r\n                [1, 2, 0].forEach(o => {\r\n                    const a = curveSpaceToCanvasSpace(cave.edges[j][ts[i+o]]);\r\n                    ctx9.lineTo(a[0], a[1]);\r\n                })\r\n\r\n                ctx9.fill();\r\n            }\r\n        });\r\n    };\r\n\r\n    multibind(\r\n        [seedSlider, insuranceSlider, curvinessSlider, qualitySlider],\r\n        ['oninput', 'onchange'],\r\n        update\r\n    );\r\n    update();\r\n};\r\n","import { nextRandom01 } from 'utils/prng';\r\nimport { WriteGrid, Grid } from 'utils/grid';\r\n\r\nconst getNeighborhood = (map: Grid<boolean>, x: number, y: number): number => {\r\n    let result: number = 0;\r\n\r\n    for (let nx = x-1; nx <= x+1; ++nx) {\r\n        for (let ny = y-1; ny <= y+1; ++ny) {\r\n            if (nx == x && ny == y) continue;\r\n            if (nx < 1 || ny < 1 || nx >= map.width-1 || ny >= map.height-1) result++;\r\n            else result += map.at(nx,ny) ? 1 : 0;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const runCellularAutomaton = (width: number, height: number, seed: number, population: number, birth: number, survival: number, iterations: number): Grid<boolean> => {\r\n    const result = new WriteGrid<boolean>(width, height);\r\n    const buffer = new WriteGrid<boolean>(width, height);\r\n    let rand = nextRandom01(seed / 101);\r\n\r\n    for (let x = 0; x < width; ++x) {\r\n        for (let y = 0; y < height; ++y) {\r\n            const fill = x === 0 || y === 0 || x === width-1 || y === height-1 || rand < population;\r\n            result.write(x, y, fill);\r\n            buffer.write(x, y, fill);\r\n\r\n            rand = nextRandom01(rand);\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < iterations; ++i) {\r\n        for (let x = 1; x < width-1; ++x) {\r\n            for (let y = 1; y < height-1; ++y) {\r\n                const neighbors = getNeighborhood(result, x, y);\r\n                buffer.write(x, y, neighbors >= (result.at(x, y) ? survival : birth));\r\n            }\r\n        }\r\n        result.copyFrom(buffer);\r\n    }\r\n\r\n    return result;\r\n}","// https://en.wikipedia.org/wiki/Linear_congruential_generator\r\n\r\nconst M = 4294967296;\r\nconst A = 1664525;\r\nconst C = 1013904223;\r\n\r\nexport const nextRandom01 = (prevRandom01: number): number => \r\n    ((A * Math.floor(prevRandom01 * M) + C) % M) / M;","import { vec2 } from \"gl-matrix\";\r\n\r\ninterface Pt {\r\n    pt: vec2,\r\n    controlA: vec2,\r\n    controlB: vec2,\r\n}\r\n\r\nexport const smoothCurve = (input: vec2[], resolution: number, curviness: number): vec2[] => {\r\n    const pts: Pt[] = [];\r\n\r\n    if (resolution < 1) resolution = 1;\r\n\r\n    for (let i = 0; i < input.length; ++i) {\r\n        const prev = input[i == 0 ? input.length-1 : i-1];\r\n        const curr = input[i];\r\n        const next = input[(i + 1) % input.length];\r\n\r\n        const lenA = vec2.length(vec2.sub(vec2.create(), prev, curr));\r\n        const lenB = vec2.length(vec2.sub(vec2.create(), curr, next));\r\n\r\n        let midA = vec2.add(vec2.create(), prev, curr);\r\n        vec2.scale(midA, midA, 0.5);\r\n\r\n        let midB = vec2.add(vec2.create(), curr, next);\r\n        vec2.scale(midB, midB, 0.5);\r\n\r\n        let midDiff = vec2.sub(vec2.create(), midA, midB);\r\n        vec2.scale(midDiff, midDiff, curviness);\r\n\r\n        const diffA = vec2.scale(vec2.create(), midDiff,  lenA / (lenA + lenB));\r\n        const diffB = vec2.scale(vec2.create(), midDiff, -lenB / (lenA + lenB));\r\n\r\n        pts.push({\r\n            pt: curr,\r\n            controlA: vec2.add(vec2.create(), diffA, curr),\r\n            controlB: vec2.add(vec2.create(), diffB, curr),\r\n        });\r\n    }\r\n\r\n    const inc = 1 / resolution;\r\n\r\n    const result: vec2[] = [];\r\n    for (let i = 0; i < pts.length; ++i) {\r\n        const curr = pts[i];\r\n        const next = pts[(i + 1) % pts.length];\r\n\r\n        for (let t = 0; t < 1 - (inc / 2); t += inc) {\r\n            let newVal: vec2 = vec2.fromValues(0, 0);\r\n\r\n            vec2.scaleAndAdd(newVal, newVal, curr.pt       , (1-t)*(1-t)*(1-t));\r\n            vec2.scaleAndAdd(newVal, newVal, curr.controlB , 3*(1-t)*(1-t)*t);\r\n            vec2.scaleAndAdd(newVal, newVal, next.controlA , 3*(1-t)*t*t);\r\n            vec2.scaleAndAdd(newVal, newVal, next.pt       , t*t*t);\r\n\r\n            result.push(newVal);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};","import { vec2 } from 'gl-matrix';\r\n\r\nexport const triangulate = (points: vec2[]): number[] => {\r\n    const indices: number[] = [];\r\n    const n = points.length;\r\n    if (n < 3) return indices;\r\n\r\n    const V: number[] = new Array(n);\r\n    if (area(points) > 0) {\r\n        for (let v = 0; v < n; v++) V[v] = v;\r\n    } else {\r\n        for (let v = 0; v < n; v++) V[v] = (n - 1) - v;\r\n    }\r\n\r\n    let nv = n;\r\n    let count = 2 * nv;\r\n    for (let v = nv - 1; nv > 2; ) {\r\n        if ((count--) <= 0) return indices;\r\n\r\n        let u = v;\r\n        if (nv <= u) u = 0;\r\n        v = u + 1;\r\n        if (nv <= v) v = 0;\r\n        let w = v + 1;\r\n        if (nv <= w) w = 0;\r\n\r\n        if (snip(points, u, v, w, nv, V)) {\r\n            indices.push(V[u]);\r\n            indices.push(V[v]);\r\n            indices.push(V[w]);\r\n            for (let s = v, t = v + 1; t < nv; s++, t++) V[s] = V[t];\r\n            nv--;\r\n            count = 2 * nv;\r\n        }\r\n    }\r\n\r\n    return indices;\r\n};\r\n\r\nconst area = (points: vec2[]): number => {\r\n    let A = 0;\r\n    for (let p = points.length - 1, q = 0; q < points.length; p = q++) {\r\n        A += points[p][0] * points[q][1] - points[q][0] * points[p][1];\r\n    }\r\n    return A / 2;\r\n};\r\n\r\nconst inside_triangle = (A: vec2, B: vec2, C: vec2, P: vec2): boolean => {\r\n    const ax = C[0] - B[0], ay = C[1] - B[1];\r\n    const bx = A[0] - C[0], by = A[1] - C[1];\r\n    const cx = B[0] - A[0], cy = B[1] - A[1];\r\n    const apx = P[0] - A[0], apy = P[1] - A[1];\r\n    const bpx = P[0] - B[0], bpy = P[1] - B[1];\r\n    const cpx = P[0] - C[0], cpy = P[1] - C[1];\r\n\r\n    const aCROSSbp = ax * bpy - ay * bpx;\r\n    const cCROSSap = cx * apy - cy * apx;\r\n    const bCROSScp = bx * cpy - by * cpx;\r\n\r\n    return aCROSSbp >= 0 && bCROSScp >= 0 && cCROSSap >= 0;\r\n};\r\n\r\nconst snip = (points: vec2[], u: number, v: number, w: number, n: number, V: number[]): boolean => {\r\n    const A = points[V[u]];\r\n    const B = points[V[v]];\r\n    const C = points[V[w]];\r\n\r\n    const pdiff = (B[0] - A[0]) * (C[1] - A[1]) - (B[1] - A[1]) * (C[0] - A[0]);\r\n    if (pdiff < 1e-7) return false;\r\n\r\n    for (let p = 0; p < n; p++) {\r\n        if ((p == u) || (p == v) || (p == w)) continue;\r\n        const P = points[V[p]];\r\n        if (inside_triangle(A, B, C, P)) return false;\r\n    }\r\n\r\n    return true;\r\n};","import { generateCave, Cave } from 'caveGenerator';\r\nimport { CaveRenderer } from \"webgl/caveRenderer\";\r\nimport { FrameBufferTexture } from \"webgl/frameBufferTexture\";\r\nimport { BufferRenderer } from 'webgl/bufferRenderer';\r\nimport { GaussianBlur } from 'webgl/gaussianBlur';\r\n\r\n\r\ninterface SurfaceInfoBuffers {\r\n    readonly depth: WebGLTexture,\r\n    readonly normal: WebGLTexture,\r\n}\r\n\r\nconst buildSurfaceInfoBuffers = (gl: WebGLRenderingContext, size: number, cave: Cave): Promise<SurfaceInfoBuffers> =>\r\n    Promise.all([\r\n        CaveRenderer.create(gl, 'shaders/flatWhite.glsl', cave),\r\n        BufferRenderer.create(gl, 'shaders/normals.glsl'),\r\n        GaussianBlur.create(gl, size, size),\r\n        GaussianBlur.create(gl, size, size)\r\n    ])\r\n    .then(([caveRenderer, normalsBlit, gaussBlur0, gaussBlur1]) => {\r\n        const frameBufferTex = new FrameBufferTexture(gl, size, size);\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBufferTex.framebuffer);\r\n        gl.viewport(0, 0, size, size);\r\n        gl.clearColor(0, 0, 0, 1);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        caveRenderer.draw();\r\n\r\n        gaussBlur0.run(frameBufferTex.texture, 30);\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBufferTex.framebuffer);\r\n        gl.viewport(0, 0, size, size);\r\n\r\n        normalsBlit.draw(gaussBlur0.resultTexture, (gl, shader) => {\r\n            gl.uniform2f(gl.getUniformLocation(shader, \"u_resolution\"), size, size);\r\n        });\r\n\r\n        gaussBlur1.run(frameBufferTex.texture, 2);\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n        caveRenderer.release();\r\n        normalsBlit.release();\r\n        const depth = gaussBlur0.releaseTexture();\r\n        const normal = gaussBlur1.releaseTexture();\r\n\r\n        return { depth, normal };\r\n    });\r\n\r\n\r\nconst drawBasicCaveDemo = (cave: Cave, gl: WebGLRenderingContext): void => {\r\n    Promise.all([\r\n        CaveRenderer.create(gl, 'shaders/flatWhite.glsl', cave),\r\n    ])\r\n    .then(([caveRenderer]) => {\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n        gl.clearColor(0, 0, 0, 1);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        caveRenderer.draw();\r\n\r\n        caveRenderer.release();\r\n    });\r\n};\r\n\r\nconst drawInfoBufferDemo = (cave: Cave, kind: 'depth'|'normal', gl: WebGLRenderingContext): void => {\r\n    Promise.all([\r\n        BufferRenderer.create(gl, 'shaders/bufferCopy.glsl'),\r\n        buildSurfaceInfoBuffers(gl, 1024, cave)\r\n    ])\r\n    .then(([copyBlit, infoBuffers]) => {\r\n        copyBlit.draw(kind === 'depth' ? infoBuffers.depth : infoBuffers.normal);\r\n\r\n        copyBlit.release();\r\n        gl.deleteTexture(infoBuffers.depth);\r\n        gl.deleteTexture(infoBuffers.normal);\r\n    });\r\n};\r\n\r\nconst drawDetailedCaveDemo = (cave: Cave, gl: WebGLRenderingContext): void => {\r\n    Promise.all([\r\n        CaveRenderer.create(gl, 'shaders/cave.glsl', cave),\r\n        buildSurfaceInfoBuffers(gl, 1024, cave)\r\n    ])\r\n    .then(([caveRenderer, infoBuffers]) => {\r\n        const startTime = Date.now();\r\n\r\n        const render = (): void => {\r\n            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n            gl.clearColor(0, 0, 0, 1);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n            caveRenderer.drawNice(infoBuffers.depth, infoBuffers.normal, Date.now() - startTime);\r\n\r\n            requestAnimationFrame(render);\r\n        };\r\n\r\n        requestAnimationFrame(render);\r\n\r\n        //caveRenderer.release();\r\n    });\r\n};\r\n\r\nexport const initPost = () :void => {\r\n    const seed = Math.random(); //0.1248;\r\n    const cave = generateCave({ seed, curveBend: 0.75, curveQuality: 10, edgePointDist: 2 });\r\n\r\n    const gl = [0,1,2,3].map(x => (document.getElementById('canvas'+x) as HTMLCanvasElement).getContext('webgl') as WebGLRenderingContext);\r\n\r\n    drawBasicCaveDemo(cave, gl[0]);\r\n    drawInfoBufferDemo(cave, 'depth', gl[1]);\r\n    drawInfoBufferDemo(cave, 'normal', gl[2]);\r\n    drawDetailedCaveDemo(cave, gl[3])\r\n};","import { Cave } from 'caveGenerator';\r\nimport flatten = require('lodash/flatten');\r\nimport { loadShader } from './shaderLoader';\r\nimport { mat4 } from 'gl-matrix';\r\n\r\nconst getFlatVerts = (cave: Cave): number[] =>\r\n    flatten(flatten(cave.edges).map(x => Array.from(x)));\r\n\r\nconst getFlatIndices = (cave: Cave): number[] => {\r\n    let baseCount = 0;\r\n    let result: number[] = [];\r\n\r\n    cave.triangles.forEach((tris, index) => {\r\n        result = result.concat(tris.map(x => x + baseCount));\r\n        baseCount += cave.edges[index].length;\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\nexport class CaveRenderer {\r\n    private readonly gl: WebGLRenderingContext;\r\n    private readonly shader: WebGLProgram;\r\n    private readonly vertexBuffer: WebGLBuffer;\r\n    private readonly indexBuffer: WebGLBuffer;\r\n\r\n    private readonly indexBufferLen: number;\r\n\r\n    static create(gl: WebGLRenderingContext, shaderPath: string, cave: Cave): Promise<CaveRenderer> {\r\n        return loadShader(gl, shaderPath)\r\n            .then(shader => new CaveRenderer(gl, cave, shader));\r\n    }\r\n\r\n    private constructor(gl: WebGLRenderingContext, cave: Cave, shader: WebGLProgram) {\r\n        this.gl = gl;\r\n        this.shader = shader;\r\n\r\n        this.vertexBuffer = gl.createBuffer() as WebGLBuffer;\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(getFlatVerts(cave)), gl.STATIC_DRAW);\r\n\r\n        const indexBufferData = getFlatIndices(cave);\r\n        this.indexBufferLen = indexBufferData.length;\r\n\r\n        this.indexBuffer = gl.createBuffer() as WebGLBuffer;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexBufferData), gl.STATIC_DRAW);\r\n    }\r\n\r\n    draw() {\r\n        const gl = this.gl;\r\n\r\n        gl.useProgram(this.shader);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n\r\n        const posLoc = gl.getAttribLocation(this.shader, \"i_position\");\r\n        gl.enableVertexAttribArray(posLoc);\r\n        gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.drawElements(gl.TRIANGLES, this.indexBufferLen, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n\r\n    // TODO this should be default draw function\r\n    drawNice(ta: WebGLTexture, tb: WebGLTexture, t: number) {\r\n        const gl = this.gl;\r\n\r\n        gl.useProgram(this.shader);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n\r\n        const posLoc = gl.getAttribLocation(this.shader, \"i_position\");\r\n        gl.enableVertexAttribArray(posLoc);\r\n        gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        const mvp = mat4.identity(mat4.create());\r\n        mat4.perspective(mvp, Math.PI / 2, 1, .01, 100);\r\n        gl.uniformMatrix4fv(gl.getUniformLocation(this.shader, \"u_mvp\"), false, mvp);\r\n\r\n        gl.uniform1f(gl.getUniformLocation(this.shader, \"u_time\"), t);\r\n\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, ta);\r\n        gl.uniform1i(gl.getUniformLocation(this.shader, \"u_depth\"), 0);\r\n\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        gl.bindTexture(gl.TEXTURE_2D, tb);\r\n        gl.uniform1i(gl.getUniformLocation(this.shader, \"u_normal\"), 1);\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.drawElements(gl.TRIANGLES, this.indexBufferLen, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n\r\n    release() {\r\n        const gl = this.gl;\r\n\r\n        gl.useProgram(null);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        gl.deleteProgram(this.shader);\r\n        gl.deleteBuffer(this.vertexBuffer);\r\n        gl.deleteBuffer(this.indexBuffer);\r\n    }\r\n}\r\n","var baseFlatten = require('./_baseFlatten');\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nmodule.exports = flatten;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","import { FrameBufferTexture } from \"./frameBufferTexture\";\r\nimport { BufferRenderer } from \"./bufferRenderer\";\r\n\r\nexport class GaussianBlur {\r\n    private readonly gl: WebGLRenderingContext;\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    private readonly bufferRenderer: BufferRenderer;\r\n    private readonly frameTex0: FrameBufferTexture;\r\n    private readonly frameTex1: FrameBufferTexture;\r\n\r\n    static create(gl: WebGLRenderingContext, width: number, height: number): Promise<GaussianBlur> {\r\n        return BufferRenderer.create(gl, 'shaders/gaussianBlur.glsl')\r\n            .then(bufferRenderer => new GaussianBlur(gl, width, height, bufferRenderer));\r\n    }\r\n\r\n    private constructor(gl: WebGLRenderingContext, width: number, height: number, bufferRenderer: BufferRenderer) {\r\n        this.gl = gl;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.bufferRenderer = bufferRenderer;\r\n        this.frameTex0 = new FrameBufferTexture(gl, width, height);\r\n        this.frameTex1 = new FrameBufferTexture(gl, width, height);\r\n    }\r\n\r\n    run(texture: WebGLTexture, iterations: number) {\r\n        const gl = this.gl;\r\n\r\n        if (iterations < 1) iterations = 1;\r\n\r\n        for (let i = 0; i < iterations; ++i) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameTex0.framebuffer);\r\n            if (i === 0) gl.viewport(0, 0, this.width, this.height);\r\n\r\n            this.bufferRenderer.draw(i === 0 ? texture : this.frameTex1.texture, (gl, shader) => {\r\n                gl.uniform2f(gl.getUniformLocation(shader, \"u_resolution\"), this.width, this.height);\r\n                gl.uniform2f(gl.getUniformLocation(shader, \"u_direction\"), 1, 0);\r\n            });\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameTex1.framebuffer);\r\n\r\n            this.bufferRenderer.draw(this.frameTex0.texture, (gl, shader) => {\r\n                gl.uniform2f(gl.getUniformLocation(shader, \"u_resolution\"), this.width, this.height);\r\n                gl.uniform2f(gl.getUniformLocation(shader, \"u_direction\"), 0, 1);\r\n            });\r\n        }\r\n    }\r\n\r\n    get resultTexture(): WebGLTexture {\r\n        return this.frameTex1.texture;\r\n    }\r\n\r\n    release() {\r\n        this.bufferRenderer.release();\r\n        this.frameTex0.release();\r\n        this.frameTex1.release();\r\n    }\r\n\r\n    releaseTexture(): WebGLTexture {\r\n        this.bufferRenderer.release();\r\n        this.frameTex0.release();\r\n        return this.frameTex1.releaseTexture();\r\n    }\r\n}"],"sourceRoot":""}