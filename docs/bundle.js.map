{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/grid.ts","webpack:///./src/utils/math.ts","webpack:///./src/caveGenerator/findContours.ts","webpack:///./src/index.ts","webpack:///./src/pages/vector-caves.ts","webpack:///./src/caveGenerator/index.ts","webpack:///./src/caveGenerator/automaton.ts","webpack:///./src/utils/prng.ts","webpack:///./src/caveGenerator/smoothCurve.ts","webpack:///./src/caveGenerator/triangulate.ts","webpack:///./src/pages/page2-webgl.ts","webpack:///./src/webgl/shaderLoader.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","WriteGrid","width","height","this","vals","Array","write","x","y","val","at","copyFrom","grid","safeOutOfBounds","oobValue","GridTool","find","test","forEach","fn","map","result","V2","add","a","b","plus","minus","length","Math","sqrt","scaled","RectTool","area","xmax","xmin","ymax","ymin","smallestDifferenceRadians","PI","abs","findBounds","pts","Infinity","WalkedStatus","grid_1","math_1","markEdges","kind","normal","u","findContours","spaceInsurance","walkMap","_","Unwalked","contours","iter","newContour","findOneContour","push","bestCandidate","prev","candidates","minVal","minI","freshStart","findFreshContour","points","lastCan","dx","dy","lastStatus","Walked","newStatus","WalkedImportant","vector_caves_1","page2_webgl_1","postInitters","vector-caves","initPost","page2-webgl","window","caveGenerator_1","findContours_1","randomColorHex","randPair","ret","floor","random","toString","colors","events","listener","ctx","document","getElementById","getContext","seedSlider","insuranceSlider","curvinessSlider","qualitySlider","ctx2","ctx3","ctx4","ctx5","ctx6","ctx7","ctx8","ctx9","update","config","seed","parseInt","edgePointDist","curveBend","parseFloat","curveQuality","_a","generateCaveVerbose","cave","details","automatonResult","fillStyle","fillRect","coloredGrid","filledGrid","edgeMarkedGrid","degs","cos","sin","hx","round","hy","gridColorForNormal","findContoursResult","strokeStyle","outerMostContourIndex","i_1","j","beginPath","moveTo","lineTo","stroke","edges","i_2","topLeftPt","topLeftMostVertexIndex","arc","fill","triangles","ts","e","automaton_1","smoothCurve_1","triangulate_1","floodFill","replace","count","tile","generateCave","runCellularAutomaton","bigColor","color","largestColor","largestRegion","pos","size","colorGridRegions","sort","smoothContours","smoothCurve","topLeftPtI","len","topLeftPrevPt","bumpDownAmount","splice","triangulate","prng_1","getNeighborhood","nx","ny","population","birth","survival","iterations","buffer","rand","nextRandom01","neighbors","M","prevRandom01","input","resolution","curviness","curr","next","lenA","lenB","midA","midB","midDiff","diffA","diffB","pt","controlA","controlB","inc","newVal","indices","V","v","nv","w","snip","A","q","inside_triangle","B","C","P","ax","ay","bx","by","cx","cy","apx","apy","bpx","bpy","cpx","cpy","shaderLoader_1","flatten","arrays","concat","getFlatVerts","getFlatIndices","baseCount","tris","index","CaveRenderer","gl","shader","vao","createVertexArray","bindVertexArray","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","indexBufferData","indexBufferLen","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","draw","useProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","delete","deleteBuffer","deleteVertexArray","canvas","viewport","cullFace","BACK","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","Promise","all","loadShader","then","prog0","prog1","console","log","url","fetch","response","ok","Error","status","text","body","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","vertLog","getShaderInfoLog","fragShader","FRAGMENT_SHADER","fragLog","prog","createProgram","attachShader","linkProgram","buildProgram"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export interface Grid<T> {\r\n    readonly width: number;\r\n    readonly height: number;\r\n    at(x: number, y: number): T;\r\n}\r\n\r\nexport type GridCallback<T> = (x: number, y: number, val: T) => void;\r\nexport type GridMapper<T,U> = (x: number, y: number, val: T) => U;\r\n\r\nexport class WriteGrid<T> implements Grid<T> {\r\n    public readonly width: number;\r\n    public readonly height: number;\r\n\r\n    private vals: T[];\r\n\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.vals = new Array(width * height);\r\n    }\r\n\r\n    write(x: number, y: number, val: T): void {\r\n        this.vals[x + y*this.width] = val;\r\n    }\r\n\r\n    at(x: number, y: number): T {\r\n        return this.vals[x + y*this.width];\r\n    }\r\n\r\n    copyFrom(grid: Grid<T>): void {\r\n        for (let x = 0; x < this.width && x < grid.width; ++x) {\r\n            for (let y = 0; y < this.height && y < grid.height; ++y) {\r\n                this.write(x, y, grid.at(x, y));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const safeOutOfBounds = <T>(grid: Grid<T>, oobValue: T): Grid<T> => ({\r\n    width: grid.width,\r\n    height: grid.height,\r\n    at: (x, y) => x < 0 || y < 0 || x >= grid.width || y >= grid.width ? oobValue : grid.at(x, y)\r\n});\r\n\r\nexport const GridTool = {\r\n    find: <T>(grid: Grid<T>, test: GridMapper<T, boolean>): { x: number, y: number } | null => {\r\n        for (let x = 0; x < grid.width; ++x) {\r\n            for (let y = 0; y < grid.height; ++y) {\r\n                if (test(x, y, grid.at(x, y))) {\r\n                    return { x, y };\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n    forEach: <T>(grid: Grid<T>, fn: GridCallback<T>): void => {\r\n        for (let x = 0; x < grid.width; ++x) {\r\n            for (let y = 0; y < grid.height; ++y) {\r\n                fn(x, y, grid.at(x, y));\r\n            }\r\n        }\r\n    },\r\n\r\n    map: <T, U>(grid: Grid<T>, fn: GridMapper<T, U>): WriteGrid<U> => {\r\n        const result = new WriteGrid<U>(grid.width, grid.height);\r\n\r\n        for (let x = 0; x < grid.width; ++x) {\r\n            for (let y = 0; y < grid.height; ++y) {\r\n                result.write(x, y, fn(x, y, grid.at(x, y)));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n};","export interface Vec2 {\r\n    x: number,\r\n    y: number,\r\n}\r\n\r\nexport interface Rect {\r\n    xmin: number,\r\n    ymin: number,\r\n    xmax: number,\r\n    ymax: number,\r\n}\r\n\r\nexport const V2 = {\r\n    add: (a: Vec2, b: Vec2): void => {\r\n        a.x += b.x;\r\n        a.y += b.y;\r\n    },\r\n\r\n    plus: (a: Vec2, b: Vec2): Vec2 => ({\r\n        x: a.x + b.x,\r\n        y: a.y + b.y,\r\n    }),\r\n\r\n    minus: (a: Vec2, b: Vec2): Vec2 => ({\r\n        x: a.x - b.x,\r\n        y: a.y - b.y,\r\n    }),\r\n\r\n    length: (a: Vec2): number =>\r\n        Math.sqrt(a.x*a.x + a.y*a.y),\r\n    \r\n    scaled: (a: Vec2, s: number): Vec2 => ({\r\n        x: s * a.x,\r\n        y: s * a.y,\r\n    }),\r\n};\r\n\r\nexport const RectTool = {\r\n    area: (r: Rect): number =>\r\n        (r.xmax - r.xmin) * (r.ymax - r.ymin),\r\n};\r\n\r\nexport const smallestDifferenceRadians = (a: number, b: number): number => {\r\n    a %= 2 * Math.PI;\r\n    b %= 2 * Math.PI;\r\n\r\n    if (Math.abs(a - b) > Math.PI) {\r\n        if (a > 0) a -= 2 * Math.PI;\r\n        else a += 2 * Math.PI;\r\n    }\r\n\r\n    return a - b;\r\n};\r\n\r\nexport const findBounds = (pts: Vec2[]): Rect => {\r\n    const result: Rect = { xmin: Infinity, ymin: Infinity, xmax: -Infinity, ymax: -Infinity };\r\n\r\n    pts.forEach(p => {\r\n        if (p.x < result.xmin) result.xmin = p.x;\r\n        if (p.y < result.ymin) result.ymin = p.y;\r\n        if (p.x > result.xmax) result.xmax = p.x;\r\n        if (p.y > result.ymax) result.ymax = p.y;\r\n    });\r\n\r\n    return result;\r\n};","import { Grid, WriteGrid, GridTool, safeOutOfBounds } from 'utils/grid';\r\nimport { Vec2, smallestDifferenceRadians } from 'utils/math';\r\n\r\nexport interface EdgeMarkedMapTile {\r\n    kind: 'air' | 'dirt' | 'edge',\r\n    normal: number,\r\n}\r\n\r\nexport const markEdges = (grid: Grid<boolean>): WriteGrid<EdgeMarkedMapTile> => {\r\n    const result = GridTool.map(grid, (x, y, val): EdgeMarkedMapTile => \r\n        ({ kind: val ? 'dirt' : 'air', normal: 0 }));\r\n\r\n    for (let x = 0; x < grid.width; x++) {\r\n        for (let y = 0; y < grid.height; y++) {\r\n            if (!grid.at(x, y)) continue;\r\n\r\n            const l = x > 0               && !grid.at(x-1, y);\r\n            const r = x < grid.width - 2  && !grid.at(x+1, y);\r\n            const u = y > 0               && !grid.at(x, y-1);\r\n            const d = y < grid.height - 2 && !grid.at(x, y+1);\r\n\r\n            if (!l && !r && !u && !d) continue;\r\n\r\n            const normal = r && d ? 45 :\r\n                d && l ?  135 :\r\n                l && u ? -135 :\r\n                u && r ?  -45 :\r\n                r ? 0 :\r\n                d ? 90 :\r\n                l ? 180 :\r\n                -90;\r\n\r\n            result.write(x, y, { kind: 'edge', normal });\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport enum WalkedStatus {\r\n    Unwalked,\r\n    Walked,\r\n    WalkedImportant,\r\n}\r\n\r\ninterface WalkCandidate {\r\n    dx: number,\r\n    dy: number,\r\n    normal: number,\r\n}\r\n\r\ninterface GridPoint {\r\n    x: number,\r\n    y: number,\r\n}\r\n\r\nexport interface FindContoursResult {\r\n    contours: Vec2[][],\r\n    walkMap: WriteGrid<WalkedStatus>,\r\n}\r\n\r\nexport const findContours = (grid: Grid<EdgeMarkedMapTile>, spaceInsurance: 0 | 1 | 2): FindContoursResult => {\r\n    const MAX_ITER = 100;\r\n    const walkMap = GridTool.map(new WriteGrid<WalkedStatus>(grid.width, grid.height), _ => WalkedStatus.Unwalked);\r\n    const contours: Vec2[][] = [];\r\n\r\n    let iter = 0;\r\n    let newContour: Vec2[] | null = null;\r\n\r\n    do {\r\n        newContour = findOneContour(walkMap, grid, spaceInsurance);\r\n        if (newContour !== null && newContour.length > 2) {\r\n            contours.push(newContour);\r\n        }\r\n    } while (newContour != null && iter++ < MAX_ITER);\r\n\r\n    return { contours, walkMap };\r\n}\r\n\r\nconst findFreshContour = (walkMap: Grid<WalkedStatus>, grid: Grid<EdgeMarkedMapTile>): GridPoint | null => {\r\n    for (let x = 0; x < grid.width; x++) {\r\n        for (let y = 0; y < grid.height; y++) {\r\n            if (grid.at(x, y).kind === 'edge' && walkMap.at(x, y) === WalkedStatus.Unwalked) {\r\n                return { x, y };\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst bestCandidate = (prev: WalkCandidate, candidates: WalkCandidate[]): WalkCandidate => {\r\n    let minVal = 100;\r\n    let minI = 0;\r\n\r\n    for (let i = 0; i < candidates.length; ++i) {\r\n        const c = candidates[i];\r\n        const d = Math.abs(smallestDifferenceRadians(\r\n            c.normal * Math.PI / 180,\r\n            prev.normal * Math.PI / 180\r\n        ));\r\n\r\n        if (d < minVal) {\r\n            minVal = d;\r\n            minI = i;\r\n        }\r\n    }\r\n\r\n    return candidates[minI];\r\n};\r\n\r\nconst findOneContour = (walkMap: WriteGrid<WalkedStatus>, grid: Grid<EdgeMarkedMapTile>, spaceInsurance: 0 | 1 | 2): Vec2[] | null => {\r\n    const MAX_ITER = 5000;\r\n\r\n    const freshStart = findFreshContour(walkMap, grid);\r\n    if (freshStart === null) {\r\n        return null;\r\n    }\r\n\r\n    grid = safeOutOfBounds(grid, {kind: 'dirt', normal: 0} as EdgeMarkedMapTile);\r\n\r\n    const points: Vec2[] = [];\r\n    let x = freshStart.x;\r\n    let y = freshStart.y;\r\n\r\n    let iter = 0;\r\n    let lastCan: WalkCandidate = { dx: 0, dy: 0, normal: 0 };\r\n    let lastStatus = WalkedStatus.Walked;\r\n    let candidates: WalkCandidate[] = [];\r\n\r\n    do {\r\n        candidates = [];\r\n\r\n        for (let dx = -1; dx <= 1; dx++) {\r\n            for (let dy = -1; dy <= 1; dy++) {\r\n                if (dx === 0 && dy === 0) continue;\r\n                if (grid.at(x+dx, y+dy).kind === 'edge'\r\n                && walkMap.at(x+dx, y+dy) === WalkedStatus.Unwalked) {\r\n                    candidates.push({dx, dy, normal: grid.at(x+dx, y+dy).normal});\r\n                }\r\n            }\r\n        }\r\n\r\n        if (candidates.length > 0) {\r\n            const c = bestCandidate(lastCan, candidates);\r\n            x += c.dx;\r\n            y += c.dy;\r\n\r\n            let newStatus = WalkedStatus.Walked;\r\n            if (c.normal !== lastCan.normal) {\r\n                let important;\r\n                if (spaceInsurance === 0) {\r\n                    important = true;\r\n                } else if (spaceInsurance === 1) {\r\n                    important = c.dx != 0 && c.dy != 0 || lastStatus != WalkedStatus.WalkedImportant;\r\n                } else {\r\n                    important = lastStatus != WalkedStatus.WalkedImportant;\r\n                }\r\n\r\n                if (important) {\r\n                    newStatus = WalkedStatus.WalkedImportant;\r\n                }\r\n            }\r\n\r\n            if (newStatus === WalkedStatus.WalkedImportant) {\r\n                points.push({\r\n                    x: (x + 0.5)/grid.width - 0.5,\r\n                    y: (y + 0.5)/grid.height - 0.5,\r\n                });\r\n            }\r\n\r\n            walkMap.write(x, y, newStatus);\r\n            lastStatus = newStatus;\r\n            lastCan = c;\r\n        }\r\n    }\r\n    while (candidates.length > 0 && iter++ < MAX_ITER);\r\n\r\n    return points;\r\n};","import { initPost as initPost_vectorCaves } from 'pages/vector-caves';\r\nimport { initPost as initPost_webgl } from 'pages/page2-webgl';\r\n\r\nconst postInitters: {[key: string]: () => void} = {\r\n    'vector-caves': initPost_vectorCaves,\r\n    'page2-webgl': initPost_webgl\r\n};\r\n\r\n(window as any).initPost = (name: string): void =>\r\n    postInitters[name]();","import { generateCaveVerbose, CaveGeneratorConfig } from 'caveGenerator';\r\nimport { GridTool } from 'utils/grid';\r\nimport { WalkedStatus } from 'caveGenerator/findContours';\r\n\r\nconst randomColorHex = (): string => {\r\n    const randPair = (): string => {\r\n        let ret = Math.floor(Math.random() * 256).toString(16);\r\n        if (ret.length < 2) ret = '0'+ret;\r\n        return ret;\r\n    };\r\n\r\n    return '#' + randPair() + randPair() + randPair();\r\n};\r\n\r\nconst colors = [0,0,0,0,0,0,0,0,0,0].map(_ => randomColorHex());\r\n\r\nconst gridColorForNumber = (n: number): string => {\r\n    if (n < 0) return '#000';\r\n    return colors[n % colors.length];\r\n};\r\n\r\nconst gridColorForNormal = (degs: number): string => {\r\n    const x = Math.cos(degs * Math.PI / 180);\r\n    const y = Math.sin(degs * Math.PI / 180);\r\n\r\n    const hx = Math.round(15 * (0.5*x + 0.5));\r\n    const hy = Math.round(15 * (0.5*y + 0.5));\r\n\r\n    const result = '#' + hx.toString(16) + hy.toString(16) + 'f';\r\n\r\n    return result;\r\n};\r\n\r\nconst multibind = (objs: any[], events: string[], listener: Function): void => {\r\n    objs.forEach(o => {\r\n        events.forEach(e => {\r\n            o[e] = listener;\r\n        });\r\n    });\r\n};\r\n\r\nexport const initPost = () :void => {\r\n    const firstCanvas = document.getElementById('first-canvas') as HTMLCanvasElement;\r\n    const ctx = firstCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const seedSlider = document.getElementById('seed-slider') as HTMLInputElement;\r\n    const insuranceSlider = document.getElementById('insurance-slider') as HTMLInputElement;\r\n    const curvinessSlider = document.getElementById('curviness-slider') as HTMLInputElement;\r\n    const qualitySlider = document.getElementById('quality-slider') as HTMLInputElement;\r\n\r\n    const secondCanvas = document.getElementById('second-canvas') as HTMLCanvasElement;\r\n    const ctx2 = secondCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const thirdCanvas = document.getElementById('third-canvas') as HTMLCanvasElement;\r\n    const ctx3 = thirdCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const fourthCanvas = document.getElementById('fourth-canvas') as HTMLCanvasElement;\r\n    const ctx4 = fourthCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const fifthCanvas = document.getElementById('fifth-canvas') as HTMLCanvasElement;\r\n    const ctx5 = fifthCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const sixthCanvas = document.getElementById('sixth-canvas') as HTMLCanvasElement;\r\n    const ctx6 = sixthCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const seventhCanvas = document.getElementById('seventh-canvas') as HTMLCanvasElement;\r\n    const ctx7 = seventhCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const eighthCanvas = document.getElementById('eighth-canvas') as HTMLCanvasElement;\r\n    const ctx8 = eighthCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const ninthCanvas = document.getElementById('ninth-canvas') as HTMLCanvasElement;\r\n    const ctx9 = ninthCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    const update = () :void => {\r\n        const config: CaveGeneratorConfig = {\r\n            seed: parseInt(seedSlider.value),\r\n            edgePointDist: parseInt(insuranceSlider.value) as any,\r\n            curveBend: 2 * parseFloat(curvinessSlider.value) / 100,\r\n            curveQuality: parseFloat(qualitySlider.value), \r\n        };\r\n\r\n        const { cave, details } = generateCaveVerbose(config);\r\n\r\n        GridTool.forEach(details.automatonResult, (x, y, val) => {\r\n            ctx.fillStyle = val ? '#000' : '#FFF';\r\n            ctx.fillRect(4*x, 4*y, 4, 4);\r\n        });\r\n\r\n        GridTool.forEach(details.coloredGrid, (x, y, val) => {\r\n            ctx2.fillStyle = gridColorForNumber(val);\r\n            ctx2.fillRect(4*x, 4*y, 4, 4);\r\n        });\r\n\r\n        GridTool.forEach(details.filledGrid, (x, y, val) => {\r\n            ctx3.fillStyle = val ? '#000' : '#FFF';\r\n            ctx3.fillRect(4*x, 4*y, 4, 4);\r\n        });\r\n\r\n        GridTool.forEach(details.edgeMarkedGrid, (x, y, val) => {\r\n            ctx4.fillStyle = val.kind === 'edge' ? gridColorForNormal(val.normal) : val.kind === 'air' ? '#655' : '#77f';\r\n            ctx4.fillRect(4*x, 4*y, 4, 4);\r\n        });\r\n\r\n        const contours = details.findContoursResult;\r\n\r\n        GridTool.forEach(contours.walkMap, (x, y, val) => {\r\n            ctx5.fillStyle = val === WalkedStatus.WalkedImportant ? '#fff' : val === WalkedStatus.Walked ? '#333' : '#000';\r\n            ctx5.fillRect(4*x, 4*y, 4, 4);\r\n\r\n            ctx6.fillStyle = val === WalkedStatus.WalkedImportant ? '#333' : '#000';\r\n            ctx6.fillRect(9*x, 9*y, 9, 9);\r\n        });\r\n\r\n        // =--------------------------------------------\r\n\r\n        contours.contours.forEach((c, i) => {\r\n            ctx6.strokeStyle = i === details.outerMostContourIndex ? '#f00' : '#933';\r\n\r\n            for (let i = 0; i < c.length; ++i) {\r\n                const j = (i + 1) % c.length;\r\n                const a = { x: 9 * contours.walkMap.width * c[i].x, y: 9 * contours.walkMap.height * c[i].y };\r\n                const b = { x: 9 * contours.walkMap.width * c[j].x, y: 9 * contours.walkMap.height * c[j].y };\r\n                \r\n                ctx6.beginPath();\r\n                ctx6.moveTo(9 * contours.walkMap.width / 2 + a.x, 9 * contours.walkMap.height / 2 + a.y);\r\n                ctx6.lineTo(9 * contours.walkMap.width / 2 + b.x, 9 * contours.walkMap.height / 2 + b.y);\r\n                ctx6.stroke(); // TODO closePath\r\n            }\r\n        });\r\n\r\n        // =--------------------------------------------\r\n\r\n        ctx7.strokeStyle = '#0f0';\r\n        ctx7.fillStyle = '#000';\r\n        ctx7.fillRect(0, 0, 675, 675);\r\n\r\n        cave.edges.forEach((c, i) => {\r\n            ctx7.strokeStyle = i === details.outerMostContourIndex ? '#0f0' : '#393';\r\n\r\n            for (let i = 0; i < c.length; ++i) {\r\n                const j = (i + 1) % c.length;\r\n                const a = { x: 9 * contours.walkMap.width * c[i].x, y: 9 * contours.walkMap.height * c[i].y };\r\n                const b = { x: 9 * contours.walkMap.width * c[j].x, y: 9 * contours.walkMap.height * c[j].y };\r\n                \r\n                ctx7.beginPath();\r\n                ctx7.moveTo(9 * contours.walkMap.width / 2 + a.x, 9 * contours.walkMap.height / 2 + a.y);\r\n                ctx7.lineTo(9 * contours.walkMap.width / 2 + b.x, 9 * contours.walkMap.height / 2 + b.y);\r\n                ctx7.stroke(); // TODO closePath\r\n            }\r\n        });\r\n\r\n        const topLeftPt = cave.edges[details.outerMostContourIndex][details.topLeftMostVertexIndex];\r\n\r\n        ctx7.strokeStyle = '#0f0';\r\n        ctx7.beginPath();\r\n        ctx7.moveTo(\r\n            9 * contours.walkMap.width / 2 + 9 * contours.walkMap.width * topLeftPt.x,\r\n            9 * contours.walkMap.height / 2 + 9 * contours.walkMap.height * topLeftPt.y,\r\n        );\r\n        ctx7.lineTo(\r\n            -9 * contours.walkMap.width / 2,\r\n            -9 * contours.walkMap.height / 2\r\n        );\r\n        ctx7.stroke();\r\n\r\n        ctx7.strokeStyle = '#9f9';\r\n        ctx7.beginPath();\r\n        ctx7.arc(\r\n            9 * contours.walkMap.width / 2 + 9 * contours.walkMap.width * topLeftPt.x,\r\n            9 * contours.walkMap.height / 2 + 9 * contours.walkMap.height * topLeftPt.y,\r\n            5, 0, 2*Math.PI);\r\n        ctx7.stroke();\r\n\r\n        // =--------------------------------------------\r\n\r\n        ctx8.fillStyle = '#000';\r\n        ctx8.fillRect(0, 0, 675, 675);\r\n\r\n        cave.edges.forEach((c, i) => {\r\n            ctx8.fillStyle = i === details.outerMostContourIndex ? '#0f0' : '#393';\r\n\r\n            ctx8.beginPath();\r\n            const a = { x: 9 * contours.walkMap.width * c[0].x, y: 9 * contours.walkMap.height * c[0].y };\r\n            ctx8.moveTo(9 * contours.walkMap.width / 2 + a.x, 9 * contours.walkMap.height / 2 + a.y);\r\n\r\n            for (let j = 1; j < c.length; ++j) {\r\n                const b = { x: 9 * contours.walkMap.width * c[j].x, y: 9 * contours.walkMap.height * c[j].y };\r\n                ctx8.lineTo(9 * contours.walkMap.width / 2 + b.x, 9 * contours.walkMap.height / 2 + b.y);\r\n            }\r\n\r\n            ctx8.fill();\r\n        });\r\n\r\n        // =--------------------------------------------\r\n\r\n        ctx9.fillStyle = '#000';\r\n        ctx9.fillRect(0, 0, 675, 675);\r\n\r\n        cave.triangles.forEach((ts,j) => {\r\n            for (let i = 0; i < ts.length - 2; i += 3) {\r\n                ctx9.fillStyle = randomColorHex();\r\n                ctx9.beginPath();\r\n                {\r\n                    const c = cave.edges[j][ts[i]];\r\n                    const a = { x: 8 * contours.walkMap.width * c.x, y: 8 * contours.walkMap.height * c.y };\r\n                    ctx9.moveTo(9 * contours.walkMap.width / 2 + a.x, 9 * contours.walkMap.height / 2 + a.y);\r\n                } {\r\n                    const c = cave.edges[j][ts[i+1]];\r\n                    const a = { x: 8 * contours.walkMap.width * c.x, y: 8 * contours.walkMap.height * c.y };\r\n                    ctx9.lineTo(9 * contours.walkMap.width / 2 + a.x, 9 * contours.walkMap.height / 2 + a.y);\r\n                } {\r\n                    const c = cave.edges[j][ts[i+2]];\r\n                    const a = { x: 8 * contours.walkMap.width * c.x, y: 8 * contours.walkMap.height * c.y };\r\n                    ctx9.lineTo(9 * contours.walkMap.width / 2 + a.x, 9 * contours.walkMap.height / 2 + a.y);\r\n                } {\r\n                    const c = cave.edges[j][ts[i]];\r\n                    const a = { x: 8 * contours.walkMap.width * c.x, y: 8 * contours.walkMap.height * c.y };\r\n                    ctx9.lineTo(9 * contours.walkMap.width / 2 + a.x, 9 * contours.walkMap.height / 2 + a.y);\r\n                }\r\n                ctx9.fill();\r\n            }\r\n        });\r\n    };\r\n\r\n    multibind(\r\n        [seedSlider, insuranceSlider, curvinessSlider, qualitySlider],\r\n        ['oninput', 'onchange'],\r\n        update\r\n    );\r\n    update();\r\n};\r\n","import { Grid, WriteGrid, GridTool, safeOutOfBounds } from 'utils/grid';\r\nimport { runCellularAutomaton } from './automaton';\r\nimport { markEdges, findContours, EdgeMarkedMapTile, FindContoursResult } from './findContours';\r\nimport { smoothCurve } from './smoothCurve';\r\nimport { Vec2, findBounds, RectTool } from 'utils/math';\r\nimport { triangulate } from './triangulate';\r\n\r\nexport interface CaveGeneratorConfig {\r\n    seed: number,\r\n    edgePointDist: 0 | 1 | 2,\r\n    curveQuality: number,\r\n    curveBend: number,\r\n}\r\n\r\nexport interface Cave {\r\n    edges: Vec2[][],\r\n    triangles: number[][],\r\n}\r\n\r\nexport interface CaveBuildDetails {\r\n    automatonResult: Grid<boolean>;\r\n    coloredGrid: Grid<number>;\r\n    filledGrid: Grid<boolean>;\r\n    edgeMarkedGrid: Grid<EdgeMarkedMapTile>;\r\n    findContoursResult: FindContoursResult;\r\n    outerMostContourIndex: number;\r\n    topLeftMostVertexIndex: number;\r\n}\r\n\r\nconst floodFill = (grid: WriteGrid<number>, x: number, y: number, replace: number, value: number, count: number): number => {\r\n    if (x < 0 || y < 0) return count;\r\n    if (x >= grid.width || y >= grid.height) return count;\r\n\r\n    const tile = grid.at(x, y);\r\n\r\n    if (tile === value) return count;\r\n    if (tile !== replace) return count;\r\n\r\n    grid.write(x, y, value);\r\n    count++;\r\n\r\n    count = floodFill(grid, x - 1, y, replace, value, count);\r\n    count = floodFill(grid, x + 1, y, replace, value, count);\r\n    count = floodFill(grid, x, y - 1, replace, value, count);\r\n    count = floodFill(grid, x, y + 1, replace, value, count);\r\n    return count;\r\n};\r\n\r\nconst colorGridRegions = (grid: WriteGrid<number>): number => {\r\n    let color = 1;\r\n    let largestColor = -1;\r\n    let largestRegion = 0;\r\n\r\n    while (true) {\r\n        const pos = GridTool.find(grid, (x, y, val) => val === 0);\r\n        if (pos === null) return largestColor;\r\n\r\n        const size = floodFill(grid, pos.x, pos.y, 0, color, 0);\r\n\r\n        if (size > largestRegion) {\r\n            largestRegion = size;\r\n            largestColor = color;\r\n        }\r\n\r\n        color++;\r\n    }\r\n};\r\n\r\nconst fixSingleTileBridges = (grid: WriteGrid<boolean>): void => {\r\n    GridTool.forEach(safeOutOfBounds(grid, true), (x, y, val) => {\r\n        if (!val) return;\r\n\r\n        if (val && !grid.at(x - 1, y) && !grid.at(x + 1, y)) {\r\n            grid.write(x + 1, y, true);\r\n        }\r\n\r\n        if (val && !grid.at(x, y - 1) && !grid.at(x, y + 1)) {\r\n            grid.write(x, y + 1, true);\r\n        }\r\n    });\r\n};\r\n\r\nexport const generateCave = (config: CaveGeneratorConfig): Cave => \r\n    generateCaveVerbose(config).cave;\r\n\r\nexport const generateCaveVerbose = (config: CaveGeneratorConfig): { cave: Cave, details: CaveBuildDetails } => {\r\n    const automatonResult = runCellularAutomaton(75, 75, config.seed, 0.48, 5, 4, 40);\r\n\r\n    const coloredGrid = GridTool.map(automatonResult, (x, y, val) => val ? -1 : 0);\r\n    const bigColor = colorGridRegions(coloredGrid);\r\n\r\n    const filledGrid = GridTool.map(coloredGrid, (x, y, val) => val !== bigColor);\r\n    fixSingleTileBridges(filledGrid);\r\n\r\n    const edgeMarkedGrid = markEdges(filledGrid);\r\n\r\n    const findContoursResult = findContours(edgeMarkedGrid, config.edgePointDist);\r\n\r\n    const outerMostContourIndex = findContoursResult.contours\r\n        .map((c, i) => ({ i, area: RectTool.area(findBounds(c)) }))\r\n        .sort((a, b) => b.area - a.area)\r\n        [0].i;\r\n\r\n    const smoothContours = findContoursResult.contours.map(x => smoothCurve(x, config.curveQuality, config.curveBend));\r\n\r\n    const BOUNDS = 0.51;\r\n\r\n    const mostTopLeft = (pts: Vec2[]): number =>\r\n        pts.map((p, i) => ({ i, len: (p.x+BOUNDS)*(p.x+BOUNDS) + (p.y+BOUNDS)*(p.y+BOUNDS) }))\r\n            .sort((a, b) => a.len - b.len)\r\n            [0].i;\r\n\r\n    const topLeftPtI = mostTopLeft(smoothContours[outerMostContourIndex]);\r\n    const topLeftPt = smoothContours[outerMostContourIndex][topLeftPtI];\r\n    const topLeftPrevPt = smoothContours[outerMostContourIndex][topLeftPtI === 0 ? smoothContours[outerMostContourIndex].length - 1 : topLeftPtI - 1];\r\n\r\n    const bumpDownAmount = Math.abs(topLeftPt.y - topLeftPrevPt.y);\r\n\r\n    smoothContours[outerMostContourIndex].splice(topLeftPtI, 0,\r\n        {x: -BOUNDS, y: -BOUNDS+bumpDownAmount},\r\n        {x: -BOUNDS, y:  BOUNDS},\r\n        {x:  BOUNDS, y:  BOUNDS},\r\n        {x:  BOUNDS, y: -BOUNDS},\r\n        {x: -BOUNDS, y: -BOUNDS},\r\n        {x: (topLeftPt.x + topLeftPrevPt.x) / 2, \r\n         y: (topLeftPt.y + topLeftPrevPt.y) / 2}\r\n    );\r\n\r\n    const triangles = smoothContours.map(triangulate);\r\n\r\n    smoothContours[outerMostContourIndex][topLeftPtI].y -= bumpDownAmount;\r\n    smoothContours[outerMostContourIndex][topLeftPtI+5].x = topLeftPrevPt.x;\r\n    smoothContours[outerMostContourIndex][topLeftPtI+5].y = topLeftPrevPt.y;\r\n\r\n    return {\r\n        cave: {\r\n            edges: smoothContours,\r\n            triangles\r\n        },\r\n        details: {\r\n            automatonResult,\r\n            coloredGrid,\r\n            filledGrid,\r\n            edgeMarkedGrid,\r\n            findContoursResult,\r\n            outerMostContourIndex,\r\n            topLeftMostVertexIndex: topLeftPtI\r\n        }\r\n    };\r\n};\r\n","import { nextRandom01 } from 'utils/prng';\r\nimport { WriteGrid, Grid } from 'utils/grid';\r\n\r\nconst getNeighborhood = (map: Grid<boolean>, x: number, y: number): number => {\r\n    let result: number = 0;\r\n\r\n    for (let nx = x-1; nx <= x+1; ++nx) {\r\n        for (let ny = y-1; ny <= y+1; ++ny) {\r\n            if (nx == x && ny == y) continue;\r\n            if (nx < 1 || ny < 1 || nx >= map.width-1 || ny >= map.height-1) result++;\r\n            else result += map.at(nx,ny) ? 1 : 0;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const runCellularAutomaton = (width: number, height: number, seed: number, population: number, birth: number, survival: number, iterations: number): Grid<boolean> => {\r\n    const result = new WriteGrid<boolean>(width, height);\r\n    const buffer = new WriteGrid<boolean>(width, height);\r\n    let rand = nextRandom01(seed / 101);\r\n\r\n    for (let x = 0; x < width; ++x) {\r\n        for (let y = 0; y < height; ++y) {\r\n            const fill = x === 0 || y === 0 || x === width-1 || y === height-1 || rand < population;\r\n            result.write(x, y, fill);\r\n            buffer.write(x, y, fill);\r\n\r\n            rand = nextRandom01(rand);\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < iterations; ++i) {\r\n        for (let x = 1; x < width-1; ++x) {\r\n            for (let y = 1; y < height-1; ++y) {\r\n                const neighbors = getNeighborhood(result, x, y);\r\n                buffer.write(x, y, neighbors >= (result.at(x, y) ? survival : birth));\r\n            }\r\n        }\r\n        result.copyFrom(buffer);\r\n    }\r\n\r\n    return result;\r\n}","// https://en.wikipedia.org/wiki/Linear_congruential_generator\r\n\r\nconst M = 4294967296;\r\nconst A = 1664525;\r\nconst C = 1013904223;\r\n\r\nexport const nextRandom01 = (prevRandom01: number): number => \r\n    ((A * Math.floor(prevRandom01 * M) + C) % M) / M;","import { Vec2, V2 } from 'utils/math';\r\n\r\ninterface Pt {\r\n    pt: Vec2,\r\n    controlA: Vec2,\r\n    controlB: Vec2,\r\n}\r\n\r\nexport const smoothCurve = (input: Vec2[], resolution: number, curviness: number): Vec2[] => {\r\n    const pts: Pt[] = [];\r\n\r\n    if (resolution < 1) resolution = 1;\r\n\r\n    for (let i = 0; i < input.length; ++i) {\r\n        const prev = input[i == 0 ? input.length-1 : i-1];\r\n        const curr = input[i];\r\n        const next = input[(i + 1) % input.length];\r\n\r\n        const lenA = V2.length(V2.minus(prev, curr));\r\n        const lenB = V2.length(V2.minus(curr, next));\r\n\r\n        const midA = V2.scaled(V2.plus(prev, curr), 0.5);\r\n        const midB = V2.scaled(V2.plus(curr, next), 0.5);\r\n        const midDiff = V2.scaled(V2.minus(midA, midB), curviness);\r\n\r\n        const diffA = V2.scaled(midDiff,  lenA / (lenA + lenB));\r\n        const diffB = V2.scaled(midDiff, -lenB / (lenA + lenB));\r\n\r\n        pts.push({\r\n            pt: curr,\r\n            controlA: V2.plus(curr, diffA),\r\n            controlB: V2.plus(curr, diffB),\r\n        });\r\n    }\r\n\r\n    const inc = 1 / resolution;\r\n\r\n    const result: Vec2[] = [];\r\n    for (let i = 0; i < pts.length; ++i) {\r\n        const curr = pts[i];\r\n        const next = pts[(i + 1) % pts.length];\r\n\r\n        for (let t = 0; t < 1 - (inc / 2); t += inc) {\r\n            let newVal: Vec2 = { x: 0, y: 0 };\r\n\r\n            V2.add(newVal, V2.scaled(curr.pt       , (1-t)*(1-t)*(1-t)));\r\n            V2.add(newVal, V2.scaled(curr.controlB , 3*(1-t)*(1-t)*t));\r\n            V2.add(newVal, V2.scaled(next.controlA , 3*(1-t)*t*t));\r\n            V2.add(newVal, V2.scaled(next.pt       , t*t*t));\r\n\r\n            result.push(newVal);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};","import { Vec2 } from 'utils/math';\r\n\r\nexport const triangulate = (points: Vec2[]): number[] => {\r\n    const indices: number[] = [];\r\n    const n = points.length;\r\n    if (n < 3) return indices;\r\n\r\n    const V: number[] = new Array(n);\r\n    if (area(points) > 0) {\r\n        for (let v = 0; v < n; v++) V[v] = v;\r\n    } else {\r\n        for (let v = 0; v < n; v++) V[v] = (n - 1) - v;\r\n    }\r\n\r\n    let nv = n;\r\n    let count = 2 * nv;\r\n    for (let v = nv - 1; nv > 2; ) {\r\n        if ((count--) <= 0) return indices;\r\n\r\n        let u = v;\r\n        if (nv <= u) u = 0;\r\n        v = u + 1;\r\n        if (nv <= v) v = 0;\r\n        let w = v + 1;\r\n        if (nv <= w) w = 0;\r\n\r\n        if (snip(points, u, v, w, nv, V)) {\r\n            indices.push(V[u]);\r\n            indices.push(V[v]);\r\n            indices.push(V[w]);\r\n            for (let s = v, t = v + 1; t < nv; s++, t++) V[s] = V[t];\r\n            nv--;\r\n            count = 2 * nv;\r\n        }\r\n    }\r\n\r\n    return indices;\r\n};\r\n\r\nconst area = (points: Vec2[]): number => {\r\n    let A = 0;\r\n    for (let p = points.length - 1, q = 0; q < points.length; p = q++) {\r\n        A += points[p].x * points[q].y - points[q].x * points[p].y;\r\n    }\r\n    return A / 2;\r\n};\r\n\r\nconst inside_triangle = (A: Vec2, B: Vec2, C: Vec2, P: Vec2): boolean => {\r\n    const ax = C.x - B.x, ay = C.y - B.y;\r\n    const bx = A.x - C.x, by = A.y - C.y;\r\n    const cx = B.x - A.x, cy = B.y - A.y;\r\n    const apx = P.x - A.x, apy = P.y - A.y;\r\n    const bpx = P.x - B.x, bpy = P.y - B.y;\r\n    const cpx = P.x - C.x, cpy = P.y - C.y;\r\n\r\n    const aCROSSbp = ax * bpy - ay * bpx;\r\n    const cCROSSap = cx * apy - cy * apx;\r\n    const bCROSScp = bx * cpy - by * cpx;\r\n\r\n    return aCROSSbp >= 0 && bCROSScp >= 0 && cCROSSap >= 0;\r\n};\r\n\r\nconst snip = (points: Vec2[], u: number, v: number, w: number, n: number, V: number[]): boolean => {\r\n    const A = points[V[u]];\r\n    const B = points[V[v]];\r\n    const C = points[V[w]];\r\n\r\n    const pdiff = (B.x - A.x) * (C.y - A.y) - (B.y - A.y) * (C.x - A.x);\r\n    if (pdiff < 1e-7) return false;\r\n\r\n    for (let p = 0; p < n; p++) {\r\n        if ((p == u) || (p == v) || (p == w)) continue;\r\n        const P = points[V[p]];\r\n        if (inside_triangle(A, B, C, P)) return false;\r\n    }\r\n\r\n    return true;\r\n};","import { loadShader } from \"webgl/shaderLoader\";\r\nimport { Cave, generateCave } from 'caveGenerator';\r\n\r\nconst flatten = <T>(arrays: T[][]): T[] => {\r\n    let result: T[] = [];\r\n    arrays.forEach(a => result = result.concat(a));\r\n    return result;\r\n};\r\n\r\nconst getFlatVerts = (cave: Cave): number[] =>\r\n    flatten(flatten(cave.edges).map(v => [v.x, v.y]));\r\n\r\nconst getFlatIndices = (cave: Cave): number[] => {\r\n    let baseCount = 0;\r\n    let result: number[] = [];\r\n\r\n    cave.triangles.forEach((tris, index) => {\r\n        result = result.concat(tris.map(x => x + baseCount));\r\n        baseCount += cave.edges[index].length;\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\nclass CaveRenderer {\r\n    private readonly gl: WebGL2RenderingContext;\r\n    private readonly shader: WebGLProgram;\r\n\r\n    private readonly vao: WebGLVertexArrayObject;\r\n    private readonly vertexBuffer: WebGLBuffer;\r\n    private readonly indexBuffer: WebGLBuffer;\r\n\r\n    private readonly indexBufferLen: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, cave: Cave, shader: WebGLProgram) {\r\n        this.gl = gl;\r\n        this.shader = shader;\r\n\r\n        this.vao = gl.createVertexArray() as WebGLVertexArrayObject;\r\n        gl.bindVertexArray(this.vao);\r\n\r\n        this.vertexBuffer = gl.createBuffer() as WebGLBuffer;\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(getFlatVerts(cave)), gl.STATIC_DRAW);\r\n        gl.enableVertexAttribArray(0);\r\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        const indexBufferData = getFlatIndices(cave);\r\n        this.indexBufferLen = indexBufferData.length;\r\n\r\n        this.indexBuffer = gl.createBuffer() as WebGLBuffer;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexBufferData), gl.STATIC_DRAW);\r\n    }\r\n\r\n    draw() {\r\n        const gl = this.gl;\r\n\r\n        gl.bindVertexArray(this.vao);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.useProgram(this.shader);\r\n\r\n        gl.drawElements(gl.TRIANGLES, this.indexBufferLen, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n\r\n    delete() {\r\n        const gl = this.gl;\r\n\r\n        gl.bindVertexArray(null);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        gl.deleteBuffer(this.vertexBuffer);\r\n        gl.deleteBuffer(this.indexBuffer);\r\n        gl.deleteVertexArray(this.vao);\r\n    }\r\n}\r\n\r\nexport const initPost = () :void => {\r\n    const canvas = document.getElementById('first-canvas') as HTMLCanvasElement;\r\n    const gl = canvas.getContext('webgl2') as WebGL2RenderingContext;\r\n\r\n    gl.viewport(0,0,canvas.width,canvas.height);\r\n    gl.cullFace(gl.BACK);\r\n\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    Promise.all([\r\n        loadShader(gl, '/shaders/purple.glsl'),\r\n        loadShader(gl, '/shaders/bufferCopy.glsl')\r\n    ])\r\n    .then(([prog0, prog1]) => {\r\n        if (typeof prog0 === 'string' || typeof prog1 === 'string') {\r\n            console.log('Shader error: ' + prog0 + prog1);\r\n            return;\r\n        }\r\n        \r\n        const cave = generateCave({ seed: Math.random(), curveBend: 0.75, curveQuality: 10, edgePointDist: 2 });\r\n\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        const caveRenderer = new CaveRenderer(gl, cave, prog0);\r\n        caveRenderer.draw();\r\n    });\r\n};\r\n\r\n\r\n\r\n        /*\r\n        const fbo = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\r\n        \r\n        const texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, canvas.width, canvas.height, 0, gl.RGB, gl.UNSIGNED_BYTE, null);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR); \r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        \r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); \r\n\r\n        {\r\n          gl.clearColor(0, 1, 0, 1);\r\n          gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n          const vertexBuf = gl.createBuffer();\r\n          gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuf);\r\n          gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            -0.95,0.95,0.0,  \r\n            -0.95,-0.95,0.0, \r\n            0.95,-0.95,0.0,\r\n            0.9,0,0.0,\r\n            0.9,0.9,0.0,\r\n            0,0.9,0.0,\r\n          ]), gl.STATIC_DRAW);\r\n\r\n          gl.useProgram(prog0);\r\n\r\n          const coord = gl.getAttribLocation(prog0, \"c\");\r\n          gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);\r\n          gl.enableVertexAttribArray(coord);\r\n\r\n          gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n        }\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        {    \r\n          const vertexBuf = gl.createBuffer();\r\n          gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuf);\r\n          gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ \r\n            -1,1,0.0,  \r\n            -1,-1,0.0, \r\n            1,-1,0.0,\r\n            1,-1,0.0,\r\n            1,1,0.0,\r\n            -1,1,0.0,\r\n          ]), gl.STATIC_DRAW);\r\n\r\n          gl.useProgram(prog1);\r\n\r\n          const coord = gl.getAttribLocation(prog1, \"c\");\r\n          gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);\r\n          gl.enableVertexAttribArray(coord);\r\n\r\n          gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n        }\r\n        */\r\n","const VERT_HEADER = \r\n    `#version 300 es\r\n    #define VERTEX\r\n    #define v2f out\r\n    `;\r\n\r\nconst FRAG_HEADER = \r\n    `#version 300 es\r\n    #define FRAGMENT\r\n    #define v2f in\r\n    precision highp float;\r\n    `;\r\n\r\nconst buildProgram = (gl: WebGLRenderingContext, body: string): WebGLProgram | string => {\r\n    const vertShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;\r\n    gl.shaderSource(vertShader, VERT_HEADER + body + '\\n');\r\n    gl.compileShader(vertShader);\r\n\r\n    const vertLog = gl.getShaderInfoLog(vertShader);\r\n    if (vertLog === null || vertLog.length > 0) {\r\n        return vertLog as string;\r\n    }\r\n\r\n    const fragShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;\r\n    gl.shaderSource(fragShader, FRAG_HEADER + body + '\\n');\r\n    gl.compileShader(fragShader);\r\n\r\n    const fragLog = gl.getShaderInfoLog(fragShader);\r\n    if (fragLog === null || fragLog.length > 0) {\r\n        return fragLog as string;\r\n    }\r\n\r\n    const prog = gl.createProgram() as WebGLProgram;\r\n    gl.attachShader(prog, vertShader);\r\n    gl.attachShader(prog, fragShader);\r\n    gl.linkProgram(prog);\r\n    return prog;\r\n};\r\n\r\nexport const loadShader = (gl: WebGLRenderingContext, url: string): Promise<WebGLProgram | string> =>\r\n    fetch(url)\r\n        .then(response => {\r\n            if (!response.ok) throw new Error(\"HTTP error, status = \" + response.status);\r\n            return response.text();\r\n        })\r\n        .then(shader => buildProgram(gl, shader));"],"sourceRoot":""}